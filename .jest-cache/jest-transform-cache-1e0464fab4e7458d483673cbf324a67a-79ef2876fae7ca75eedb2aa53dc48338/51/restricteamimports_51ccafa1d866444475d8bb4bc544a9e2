d3fd3c90dd158ff9ecee3332a09e31d3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Í∏∞Î≥∏ ÏòµÏÖòÏùÑ ÏÉÅÏàòÎ°ú Ï†ïÏùò
const DEFAULT_OPTIONS = {
    allowedGlobalFolders: ["core", "shared"],
    teamFolderPrefix: "team-",
    teamsBasePath: "src/teams",
};
const restrictTeamImports = {
    meta: {
        type: "problem",
        docs: {
            description: "Restrict imports between team folders to maintain clean architecture",
            category: "Best Practices",
            recommended: true,
        },
        schema: [
            {
                type: "object",
                properties: {
                    allowedGlobalFolders: {
                        type: "array",
                        items: { type: "string" },
                        default: DEFAULT_OPTIONS.allowedGlobalFolders,
                    },
                    teamFolderPrefix: {
                        type: "string",
                        default: DEFAULT_OPTIONS.teamFolderPrefix,
                    },
                    teamsBasePath: {
                        type: "string",
                        default: DEFAULT_OPTIONS.teamsBasePath,
                    },
                },
                additionalProperties: false,
            },
        ],
        messages: {
            crossTeamImport: '‚ùå Cross-team import detected!\n   Current team: "{{currentTeam}}"\n   Trying to import from: "{{targetTeam}}"\n   üö´ Teams cannot import from each other to maintain clean architecture.',
            restrictedImport: '‚ùå Restricted import detected!\n   Current team: "{{currentTeam}}"\n   Trying to import: "{{importPath}}"\n   ‚úÖ Allowed imports: {{allowedPaths}}',
        },
    },
    create(context) {
        // ÏòµÏÖò Ï∂îÏ∂ú - TypeScriptÍ∞Ä ÏûêÎèôÏúºÎ°ú ÌÉÄÏûÖÏùÑ Ï∂îÎ°†
        const userOptions = context.options[0];
        const options = {
            allowedGlobalFolders: userOptions?.allowedGlobalFolders ??
                DEFAULT_OPTIONS.allowedGlobalFolders,
            teamFolderPrefix: userOptions?.teamFolderPrefix ?? DEFAULT_OPTIONS.teamFolderPrefix,
            teamsBasePath: userOptions?.teamsBasePath ?? DEFAULT_OPTIONS.teamsBasePath,
        };
        const { allowedGlobalFolders, teamFolderPrefix, teamsBasePath } = options;
        /**
         * ÌååÏùº Í≤ΩÎ°úÏóêÏÑú ÌòÑÏû¨ ÌåÄ ÏûêÎèô Í∞êÏßÄ
         */
        function detectCurrentTeam(filePath) {
            const normalizedPath = filePath.replace(/\\\\/g, "/");
            const pathSegments = normalizedPath.split("/");
            const teamsIndex = pathSegments.findIndex((segment) => segment === "teams" || normalizedPath.includes(teamsBasePath));
            if (teamsIndex === -1) {
                return null;
            }
            for (let i = teamsIndex + 1; i < pathSegments.length; i++) {
                const segment = pathSegments[i];
                if (segment.startsWith(teamFolderPrefix)) {
                    return segment;
                }
            }
            return null;
        }
        /**
         * Import Í≤ΩÎ°ú ÏûêÎèô Î∂ÑÏÑù
         */
        function analyzeImportPath(importPath) {
            // Ïô∏Î∂Ä ÎùºÏù¥Î∏åÎü¨Î¶¨
            if (!importPath.startsWith("./") &&
                !importPath.startsWith("../") &&
                !importPath.startsWith("@/")) {
                return {
                    type: "external",
                    folder: null,
                    team: null,
                    description: "External library",
                };
            }
            // ÏÉÅÎåÄ Í≤ΩÎ°ú
            if (importPath.startsWith("./") || importPath.startsWith("../")) {
                return {
                    type: "relative",
                    folder: null,
                    team: null,
                    description: "Relative path (same team)",
                };
            }
            // Ï†àÎåÄ Í≤ΩÎ°ú (@/)
            if (importPath.startsWith("@/")) {
                const cleanPath = importPath.replace("@/", "");
                const segments = cleanPath.split("/");
                const firstSegment = segments[0];
                // Ï†ÑÏó≠ ÌóàÏö© Ìè¥ÎçîÎì§
                if (allowedGlobalFolders.includes(firstSegment)) {
                    return {
                        type: "global",
                        folder: firstSegment,
                        team: null,
                        description: `Global ${firstSegment} folder`,
                    };
                }
                // teams Ìè¥Îçî ÎÇ¥Î∂Ä
                if (firstSegment === "teams" && segments[1]) {
                    const teamName = segments[1];
                    if (teamName.startsWith(teamFolderPrefix)) {
                        return {
                            type: "team",
                            folder: teamName,
                            team: teamName,
                            description: `Team folder: ${teamName}`,
                        };
                    }
                }
                // Í∏∞ÌÉÄ Ìè¥Îçî
                return {
                    type: "restricted",
                    folder: firstSegment,
                    team: null,
                    description: `Restricted folder: ${firstSegment}`,
                };
            }
            return {
                type: "unknown",
                folder: null,
                team: null,
                description: "Unknown import type",
            };
        }
        /**
         * Import ÌóàÏö© Ïó¨Î∂Ä ÏûêÎèô ÌåêÎã®
         */
        function isImportAllowed(currentTeam, importInfo) {
            const { type, team: targetTeam } = importInfo;
            switch (type) {
                case "external":
                case "relative":
                case "global":
                    return true;
                case "team":
                    return targetTeam === currentTeam;
                case "restricted":
                case "unknown":
                default:
                    return false;
            }
        }
        /**
         * ÌóàÏö©Îêú Import Í≤ΩÎ°ú Î™©Î°ù ÏÉùÏÑ±
         */
        function getAllowedPaths(currentTeam) {
            const paths = [
                `@/teams/${currentTeam}/*`,
                ...allowedGlobalFolders.map((folder) => `@/${folder}/*`),
                "External libraries (react, lodash, etc.)",
                "Relative paths (./, ../)",
            ];
            return paths.join("\n   ‚úÖ ");
        }
        /**
         * Import ÏÜåÏä§Í∞Ä Î¨∏ÏûêÏó¥ Î¶¨ÌÑ∞Îü¥Ïù∏ÏßÄ ÌôïÏù∏
         */
        function isStringLiteral(source) {
            return (source !== null &&
                typeof source === "object" &&
                "type" in source &&
                source.type === "Literal" &&
                "value" in source &&
                typeof source.value === "string");
        }
        /**
         * Import Í≤ÄÏÇ¨ Î∞è ÏóêÎü¨ Î¶¨Ìè¨Ìä∏
         */
        function checkImport(node) {
            const currentFile = context.getFilename();
            const currentTeam = detectCurrentTeam(currentFile);
            if (!currentTeam) {
                return;
            }
            // ÏÜåÏä§ ÎÖ∏Îìú Ï∂îÏ∂ú
            const source = "source" in node ? node.source : null;
            if (!isStringLiteral(source)) {
                return;
            }
            const importPath = source.value;
            const importInfo = analyzeImportPath(importPath);
            if (!isImportAllowed(currentTeam, importInfo)) {
                const { type, team: targetTeam } = importInfo;
                if (type === "team") {
                    context.report({
                        node: source,
                        messageId: "crossTeamImport",
                        data: {
                            currentTeam,
                            targetTeam: targetTeam || "unknown",
                            importPath,
                        },
                    });
                }
                else {
                    context.report({
                        node: source,
                        messageId: "restrictedImport",
                        data: {
                            currentTeam,
                            importPath,
                            allowedPaths: getAllowedPaths(currentTeam),
                        },
                    });
                }
            }
        }
        return {
            ImportDeclaration: checkImport,
            ImportExpression: checkImport,
        };
    },
};
exports.default = restrictTeamImports;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,