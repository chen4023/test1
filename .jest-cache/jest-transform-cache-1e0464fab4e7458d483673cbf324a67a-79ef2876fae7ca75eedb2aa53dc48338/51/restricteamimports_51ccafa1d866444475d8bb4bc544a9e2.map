{"file":"/Users/hyeonchaeeun/Desktop/ex-test/test1/eslint-rules/restric-team-imports.ts","mappings":"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","names":[],"sources":["/Users/hyeonchaeeun/Desktop/ex-test/test1/eslint-rules/restric-team-imports.ts"],"sourcesContent":["// 📁 eslint-rules/restrict-team-imports.ts - 가장 안전한 버전\nimport type { Rule } from \"eslint\";\nimport type { ImportDeclaration, ImportExpression, Literal } from \"estree\";\n\n// 기본 옵션을 상수로 정의\nconst DEFAULT_OPTIONS = {\n  allowedGlobalFolders: [\"core\", \"shared\"],\n  teamFolderPrefix: \"team-\",\n  teamsBasePath: \"src/teams\",\n} as const;\n\ntype TeamImportRuleOptions = typeof DEFAULT_OPTIONS;\n\ninterface ImportAnalysis {\n  type: \"external\" | \"relative\" | \"global\" | \"team\" | \"restricted\" | \"unknown\";\n  folder: string | null;\n  team: string | null;\n  description?: string;\n}\n\nconst restrictTeamImports: Rule.RuleModule = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description:\n        \"Restrict imports between team folders to maintain clean architecture\",\n      category: \"Best Practices\",\n      recommended: true,\n    },\n    schema: [\n      {\n        type: \"object\",\n        properties: {\n          allowedGlobalFolders: {\n            type: \"array\",\n            items: { type: \"string\" },\n            default: DEFAULT_OPTIONS.allowedGlobalFolders,\n          },\n          teamFolderPrefix: {\n            type: \"string\",\n            default: DEFAULT_OPTIONS.teamFolderPrefix,\n          },\n          teamsBasePath: {\n            type: \"string\",\n            default: DEFAULT_OPTIONS.teamsBasePath,\n          },\n        },\n        additionalProperties: false,\n      },\n    ],\n    messages: {\n      crossTeamImport:\n        '❌ Cross-team import detected!\\n   Current team: \"{{currentTeam}}\"\\n   Trying to import from: \"{{targetTeam}}\"\\n   🚫 Teams cannot import from each other to maintain clean architecture.',\n      restrictedImport:\n        '❌ Restricted import detected!\\n   Current team: \"{{currentTeam}}\"\\n   Trying to import: \"{{importPath}}\"\\n   ✅ Allowed imports: {{allowedPaths}}',\n    },\n  },\n\n  create(context) {\n    // 옵션 추출 - TypeScript가 자동으로 타입을 추론\n    const userOptions = context.options[0];\n    const options = {\n      allowedGlobalFolders:\n        userOptions?.allowedGlobalFolders ??\n        DEFAULT_OPTIONS.allowedGlobalFolders,\n      teamFolderPrefix:\n        userOptions?.teamFolderPrefix ?? DEFAULT_OPTIONS.teamFolderPrefix,\n      teamsBasePath:\n        userOptions?.teamsBasePath ?? DEFAULT_OPTIONS.teamsBasePath,\n    };\n\n    const { allowedGlobalFolders, teamFolderPrefix, teamsBasePath } = options;\n\n    /**\n     * 파일 경로에서 현재 팀 자동 감지\n     */\n    function detectCurrentTeam(filePath: string): string | null {\n      const normalizedPath = filePath.replace(/\\\\\\\\/g, \"/\");\n      const pathSegments = normalizedPath.split(\"/\");\n\n      const teamsIndex = pathSegments.findIndex(\n        (segment) =>\n          segment === \"teams\" || normalizedPath.includes(teamsBasePath)\n      );\n\n      if (teamsIndex === -1) {\n        return null;\n      }\n\n      for (let i = teamsIndex + 1; i < pathSegments.length; i++) {\n        const segment = pathSegments[i];\n        if (segment.startsWith(teamFolderPrefix)) {\n          return segment;\n        }\n      }\n\n      return null;\n    }\n\n    /**\n     * Import 경로 자동 분석\n     */\n    function analyzeImportPath(importPath: string): ImportAnalysis {\n      // 외부 라이브러리\n      if (\n        !importPath.startsWith(\"./\") &&\n        !importPath.startsWith(\"../\") &&\n        !importPath.startsWith(\"@/\")\n      ) {\n        return {\n          type: \"external\",\n          folder: null,\n          team: null,\n          description: \"External library\",\n        };\n      }\n\n      // 상대 경로\n      if (importPath.startsWith(\"./\") || importPath.startsWith(\"../\")) {\n        return {\n          type: \"relative\",\n          folder: null,\n          team: null,\n          description: \"Relative path (same team)\",\n        };\n      }\n\n      // 절대 경로 (@/)\n      if (importPath.startsWith(\"@/\")) {\n        const cleanPath = importPath.replace(\"@/\", \"\");\n        const segments = cleanPath.split(\"/\");\n        const firstSegment = segments[0];\n\n        // 전역 허용 폴더들\n        if (allowedGlobalFolders.includes(firstSegment)) {\n          return {\n            type: \"global\",\n            folder: firstSegment,\n            team: null,\n            description: `Global ${firstSegment} folder`,\n          };\n        }\n\n        // teams 폴더 내부\n        if (firstSegment === \"teams\" && segments[1]) {\n          const teamName = segments[1];\n          if (teamName.startsWith(teamFolderPrefix)) {\n            return {\n              type: \"team\",\n              folder: teamName,\n              team: teamName,\n              description: `Team folder: ${teamName}`,\n            };\n          }\n        }\n\n        // 기타 폴더\n        return {\n          type: \"restricted\",\n          folder: firstSegment,\n          team: null,\n          description: `Restricted folder: ${firstSegment}`,\n        };\n      }\n\n      return {\n        type: \"unknown\",\n        folder: null,\n        team: null,\n        description: \"Unknown import type\",\n      };\n    }\n\n    /**\n     * Import 허용 여부 자동 판단\n     */\n    function isImportAllowed(\n      currentTeam: string,\n      importInfo: ImportAnalysis\n    ): boolean {\n      const { type, team: targetTeam } = importInfo;\n\n      switch (type) {\n        case \"external\":\n        case \"relative\":\n        case \"global\":\n          return true;\n        case \"team\":\n          return targetTeam === currentTeam;\n        case \"restricted\":\n        case \"unknown\":\n        default:\n          return false;\n      }\n    }\n\n    /**\n     * 허용된 Import 경로 목록 생성\n     */\n    function getAllowedPaths(currentTeam: string): string {\n      const paths = [\n        `@/teams/${currentTeam}/*`,\n        ...allowedGlobalFolders.map((folder: string) => `@/${folder}/*`),\n        \"External libraries (react, lodash, etc.)\",\n        \"Relative paths (./, ../)\",\n      ];\n      return paths.join(\"\\n   ✅ \");\n    }\n\n    /**\n     * Import 소스가 문자열 리터럴인지 확인\n     */\n    function isStringLiteral(\n      source: unknown\n    ): source is Literal & { value: string } {\n      return (\n        source !== null &&\n        typeof source === \"object\" &&\n        \"type\" in source &&\n        source.type === \"Literal\" &&\n        \"value\" in source &&\n        typeof source.value === \"string\"\n      );\n    }\n\n    /**\n     * Import 검사 및 에러 리포트\n     */\n    function checkImport(node: ImportDeclaration | ImportExpression): void {\n      const currentFile = context.getFilename();\n      const currentTeam = detectCurrentTeam(currentFile);\n\n      if (!currentTeam) {\n        return;\n      }\n\n      // 소스 노드 추출\n      const source = \"source\" in node ? node.source : null;\n      if (!isStringLiteral(source)) {\n        return;\n      }\n\n      const importPath = source.value;\n      const importInfo = analyzeImportPath(importPath);\n\n      if (!isImportAllowed(currentTeam, importInfo)) {\n        const { type, team: targetTeam } = importInfo;\n\n        if (type === \"team\") {\n          context.report({\n            node: source,\n            messageId: \"crossTeamImport\",\n            data: {\n              currentTeam,\n              targetTeam: targetTeam || \"unknown\",\n              importPath,\n            },\n          });\n        } else {\n          context.report({\n            node: source,\n            messageId: \"restrictedImport\",\n            data: {\n              currentTeam,\n              importPath,\n              allowedPaths: getAllowedPaths(currentTeam),\n            },\n          });\n        }\n      }\n    }\n\n    return {\n      ImportDeclaration: checkImport,\n      ImportExpression: checkImport,\n    };\n  },\n};\n\nexport default restrictTeamImports;\n"],"version":3}