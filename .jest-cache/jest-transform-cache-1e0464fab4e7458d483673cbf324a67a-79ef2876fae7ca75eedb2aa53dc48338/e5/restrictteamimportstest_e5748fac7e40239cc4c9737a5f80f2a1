0b73dcfa5f8881e3f34151f36b197997
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// 📁 eslint-rules/restrict-team-imports.test.ts
const eslint_1 = require("eslint");
const restric_team_imports_1 = __importDefault(require("./restric-team-imports"));
const ruleTester = new eslint_1.RuleTester({
    parser: require.resolve("@typescript-eslint/parser"),
    parserOptions: {
        ecmaVersion: 2020,
        sourceType: "module",
        ecmaFeatures: {
            jsx: true,
        },
    },
});
describe("restrict-team-imports (TypeScript 규칙)", () => {
    const defaultOptions = {
        allowedGlobalFolders: ["core", "shared"],
        teamFolderPrefix: "team-",
        teamsBasePath: "src/teams",
    };
    ruleTester.run("restrict-team-imports", restric_team_imports_1.default, {
        valid: [
            // ✅ 외부 라이브러리 import
            {
                code: `import React from 'react';`,
                filename: "/project/src/teams/team-order/components/OrderList.tsx",
                options: [defaultOptions],
            },
            {
                code: `import type { FC } from 'react';`,
                filename: "/project/src/teams/team-auth/components/LoginForm.tsx",
                options: [defaultOptions],
            },
            {
                code: `import { z } from 'zod';`,
                filename: "/project/src/teams/team-order/types/order.ts",
                options: [defaultOptions],
            },
            // ✅ core 폴더 import
            {
                code: `import { Button } from '@/core/components/Button';`,
                filename: "/project/src/teams/team-order/components/OrderList.tsx",
                options: [defaultOptions],
            },
            {
                code: `import type { ButtonProps } from '@/core/components/Button';`,
                filename: "/project/src/teams/team-auth/components/AuthButton.tsx",
                options: [defaultOptions],
            },
            // ✅ shared 폴더 import
            {
                code: `import { ApiClient } from '@/shared/api/client';`,
                filename: "/project/src/teams/team-order/services/orderService.ts",
                options: [defaultOptions],
            },
            {
                code: `import type { User } from '@/shared/types/user';`,
                filename: "/project/src/teams/team-profile/types/profile.ts",
                options: [defaultOptions],
            },
            // ✅ 같은 팀 내부 import
            {
                code: `import { OrderType } from '@/teams/team-order/types/order';`,
                filename: "/project/src/teams/team-order/components/OrderList.tsx",
                options: [defaultOptions],
            },
            {
                code: `import type { OrderFormData } from '@/teams/team-order/types/forms';`,
                filename: "/project/src/teams/team-order/components/OrderForm.tsx",
                options: [defaultOptions],
            },
            // ✅ 상대 경로 import
            {
                code: `import { useOrder } from '../hooks/useOrder';`,
                filename: "/project/src/teams/team-order/components/OrderForm.tsx",
                options: [defaultOptions],
            },
            {
                code: `import type { OrderHookReturn } from './useOrder';`,
                filename: "/project/src/teams/team-order/hooks/useOrderForm.ts",
                options: [defaultOptions],
            },
            // ✅ Dynamic import - 허용되는 경우
            {
                code: `const Component = await import('@/core/components/Modal');`,
                filename: "/project/src/teams/team-order/pages/OrderPage.tsx",
                options: [defaultOptions],
            },
            {
                code: `const { OrderUtils } = await import('@/teams/team-order/utils/orderUtils');`,
                filename: "/project/src/teams/team-order/components/OrderList.tsx",
                options: [defaultOptions],
            },
            // ✅ 팀 폴더 외부에서는 제한 없음
            {
                code: `import { ProfileComponent } from '@/teams/team-profile/components/Profile';`,
                filename: "/project/src/core/components/Layout.tsx",
                options: [defaultOptions],
            },
        ],
        invalid: [
            // ❌ 다른 팀으로의 import
            {
                code: `import { UserProfile } from '@/teams/team-profile/components/UserProfile';`,
                filename: "/project/src/teams/team-order/components/OrderList.tsx",
                options: [defaultOptions],
                errors: [
                    {
                        messageId: "crossTeamImport",
                        data: {
                            currentTeam: "team-order",
                            targetTeam: "team-profile",
                        },
                    },
                ],
            },
            // ❌ 타입 import도 제한됨
            {
                code: `import type { AuthUser } from '@/teams/team-auth/types/user';`,
                filename: "/project/src/teams/team-order/types/order.ts",
                options: [defaultOptions],
                errors: [
                    {
                        messageId: "crossTeamImport",
                        data: {
                            currentTeam: "team-order",
                            targetTeam: "team-auth",
                        },
                    },
                ],
            },
            // ❌ 여러 다른 팀 import
            {
                code: `
          import { AuthService } from '@/teams/team-auth/services/auth';
          import type { ProfileData } from '@/teams/team-profile/types/profile';
          import { DashboardChart } from '@/teams/team-dashboard/components/Chart';
        `,
                filename: "/project/src/teams/team-order/components/OrderList.tsx",
                options: [defaultOptions],
                errors: [
                    {
                        messageId: "crossTeamImport",
                        data: {
                            currentTeam: "team-order",
                            targetTeam: "team-auth",
                        },
                    },
                    {
                        messageId: "crossTeamImport",
                        data: {
                            currentTeam: "team-order",
                            targetTeam: "team-profile",
                        },
                    },
                    {
                        messageId: "crossTeamImport",
                        data: {
                            currentTeam: "team-order",
                            targetTeam: "team-dashboard",
                        },
                    },
                ],
            },
            // ❌ Dynamic import로 다른 팀 접근
            {
                code: `const ProfileComponent = await import('@/teams/team-profile/components/Profile');`,
                filename: "/project/src/teams/team-order/pages/OrderPage.tsx",
                options: [defaultOptions],
                errors: [
                    {
                        messageId: "crossTeamImport",
                        data: {
                            currentTeam: "team-order",
                            targetTeam: "team-profile",
                        },
                    },
                ],
            },
            // ❌ 허용되지 않은 폴더에서 import
            {
                code: `import { Utils } from '@/utils/helper';`,
                filename: "/project/src/teams/team-order/components/OrderList.tsx",
                options: [defaultOptions],
                errors: [
                    {
                        messageId: "restrictedImport",
                        data: {
                            currentTeam: "team-order",
                            importPath: "@/utils/helper",
                        },
                    },
                ],
            },
            // ❌ 허용되지 않은 lib 폴더
            {
                code: `import type { LibConfig } from '@/lib/config';`,
                filename: "/project/src/teams/team-auth/pages/LoginPage.tsx",
                options: [defaultOptions],
                errors: [
                    {
                        message: `❌ Restricted import detected!
        Current team: "team-auth"
        Trying to import: "@/lib/config"
        ✅ Allowed imports: @/teams/team-auth/*
        ✅ @/core/*
        ✅ @/shared/*
        ✅ External libraries (react, lodash, etc.)
        ✅ Relative paths (./, ../)`,
                    },
                ],
            },
            // ❌ 커스텀 설정에서도 크로스 팀 import 금지
            {
                code: `import { AuthComponent } from '@/teams/team-auth/components/Auth';`,
                filename: "/project/src/teams/team-order/components/OrderList.tsx",
                options: [
                    {
                        ...defaultOptions,
                        allowedGlobalFolders: ["core", "shared", "utils"],
                    },
                ],
                errors: [
                    {
                        messageId: "crossTeamImport",
                        data: {
                            currentTeam: "team-order",
                            targetTeam: "team-auth",
                        },
                    },
                ],
            },
        ],
    });
    // 🧪 커스텀 설정 테스트
    describe("커스텀 설정 테스트", () => {
        const customOptions = {
            allowedGlobalFolders: ["shared", "entities", "widgets"],
            teamFolderPrefix: "feature-",
            teamsBasePath: "src/features",
        };
        ruleTester.run("restrict-team-imports with custom config", restric_team_imports_1.default, {
            valid: [
                // ✅ 커스텀 allowedGlobalFolders 테스트
                {
                    code: `import { EntityModel } from '@/entities/user';`,
                    filename: "/project/src/features/feature-order/components/OrderList.tsx",
                    options: [customOptions],
                },
                {
                    code: `import { WidgetComponent } from '@/widgets/header';`,
                    filename: "/project/src/features/feature-auth/pages/LoginPage.tsx",
                    options: [customOptions],
                },
                // ✅ 커스텀 teamFolderPrefix 테스트
                {
                    code: `import { FeatureComponent } from '@/teams/feature-auth/components/Auth';`,
                    filename: "/project/src/features/feature-auth/pages/LoginPage.tsx",
                    options: [customOptions],
                },
            ],
            invalid: [
                // ❌ 커스텀 설정에서도 크로스 팀 import 금지
                {
                    code: `import { AuthComponent } from '@/teams/feature-auth/components/Auth';`,
                    filename: "/project/src/features/feature-order/components/OrderList.tsx",
                    options: [customOptions],
                    errors: [
                        {
                            messageId: "crossTeamImport",
                            data: {
                                currentTeam: "feature-order",
                                targetTeam: "feature-auth",
                            },
                        },
                    ],
                },
            ],
        });
    });
    // 🧪 엣지 케이스 테스트
    describe("엣지 케이스 테스트", () => {
        ruleTester.run("restrict-team-imports edge cases", restric_team_imports_1.default, {
            valid: [
                // ✅ 깊은 중첩 폴더 구조
                {
                    code: `import { DeepComponent } from '@/teams/team-order/components/forms/inputs/TextInput';`,
                    filename: "/project/src/teams/team-order/pages/order/detail/OrderDetail.tsx",
                    options: [defaultOptions],
                },
                // ✅ 대소문자 혼합 (실제 팀명 감지)
                {
                    code: `import { Component } from '@/teams/Team-Order/components/Button';`,
                    filename: "/project/src/teams/Team-Order/pages/OrderPage.tsx",
                    options: [defaultOptions],
                },
                // ✅ 복잡한 import 구조
                {
                    code: `import { 
            OrderService, 
            type OrderConfig,
            ORDER_CONSTANTS 
          } from '@/teams/team-order/services/orderService';`,
                    filename: "/project/src/teams/team-order/components/OrderList.tsx",
                    options: [defaultOptions],
                },
                // ✅ 네임스페이스 import
                {
                    code: `import * as OrderUtils from '@/teams/team-order/utils/orderUtils';`,
                    filename: "/project/src/teams/team-order/components/OrderList.tsx",
                    options: [defaultOptions],
                },
                // ✅ 조건부 import (동적)
                {
                    code: `
            if (condition) {
              const { OrderModal } = await import('@/teams/team-order/components/OrderModal');
            }
          `,
                    filename: "/project/src/teams/team-order/pages/OrderPage.tsx",
                    options: [defaultOptions],
                },
                // ✅ 타입 전용 import
                {
                    code: `import type { OrderStatus, OrderPriority } from '@/teams/team-order/types/order';`,
                    filename: "/project/src/teams/team-order/hooks/useOrder.ts",
                    options: [defaultOptions],
                },
            ],
            invalid: [
                // ❌ 깊은 중첩에서도 크로스 팀 감지
                {
                    code: `import { ProfileForm } from '@/teams/team-profile/components/forms/ProfileForm';`,
                    filename: "/project/src/teams/team-order/pages/order/detail/OrderDetail.tsx",
                    options: [defaultOptions],
                    errors: [
                        {
                            messageId: "crossTeamImport",
                            data: {
                                currentTeam: "team-order",
                                targetTeam: "team-profile",
                            },
                        },
                    ],
                },
                // ❌ 복잡한 import에서도 감지
                {
                    code: `import { 
            AuthService,
            type AuthConfig 
          } from '@/teams/team-auth/services/authService';`,
                    filename: "/project/src/teams/team-order/components/OrderList.tsx",
                    options: [defaultOptions],
                    errors: [
                        {
                            messageId: "crossTeamImport",
                            data: {
                                currentTeam: "team-order",
                                targetTeam: "team-auth",
                            },
                        },
                    ],
                },
                // ❌ 네임스페이스 import도 제한
                {
                    code: `import * as ProfileUtils from '@/teams/team-profile/utils/profileUtils';`,
                    filename: "/project/src/teams/team-order/components/OrderList.tsx",
                    options: [defaultOptions],
                    errors: [
                        {
                            messageId: "crossTeamImport",
                            data: {
                                currentTeam: "team-order",
                                targetTeam: "team-profile",
                            },
                        },
                    ],
                },
                // ❌ 조건부 동적 import도 제한
                {
                    code: `
            if (showProfile) {
              const { ProfileModal } = await import('@/teams/team-profile/components/ProfileModal');
            }
          `,
                    filename: "/project/src/teams/team-order/pages/OrderPage.tsx",
                    options: [defaultOptions],
                    errors: [
                        {
                            messageId: "crossTeamImport",
                            data: {
                                currentTeam: "team-order",
                                targetTeam: "team-profile",
                            },
                        },
                    ],
                },
            ],
        });
    });
    // 🧪 실제 시나리오 테스트
    describe("실제 사용 시나리오", () => {
        ruleTester.run("realistic scenarios", restric_team_imports_1.default, {
            valid: [
                // ✅ 실제 Next.js 컴포넌트 패턴
                {
                    code: `
            'use client';
            
            import React, { useState, useCallback } from 'react';
            import type { FC, MouseEvent } from 'react';
            import { Button } from '@/core/components/ui/Button';
            import { Card } from '@/core/components/ui/Card';
            import { useToast } from '@/core/hooks/useToast';
            import { ApiClient } from '@/shared/api/client';
            import type { ApiResponse } from '@/shared/types/api';
            import { OrderService } from '@/teams/team-order/services/orderService';
            import type { Order, OrderStatus } from '@/teams/team-order/types/order';
            import { useOrder } from '../hooks/useOrder';
            
            interface OrderListProps {
              initialOrders: Order[];
              onOrderUpdate?: (order: Order) => void;
            }
            
            export const OrderList: FC<OrderListProps> = ({ initialOrders, onOrderUpdate }) => {
              const [orders, setOrders] = useState<Order[]>(initialOrders);
              const { updateOrderStatus } = useOrder();
              const { showToast } = useToast();
              
              const handleStatusChange = useCallback(async (orderId: string, status: OrderStatus) => {
                try {
                  const updatedOrder = await OrderService.updateStatus(orderId, status);
                  setOrders(prev => prev.map(order => 
                    order.id === orderId ? updatedOrder : order
                  ));
                  onOrderUpdate?.(updatedOrder);
                  showToast('주문 상태가 업데이트되었습니다.');
                } catch (error) {
                  showToast('업데이트에 실패했습니다.', 'error');
                }
              }, [onOrderUpdate, showToast]);
              
              return (
                <div className="space-y-4">
                  {orders.map(order => (
                    <Card key={order.id}>
                      {/* 주문 카드 내용 */}
                    </Card>
                  ))}
                </div>
              );
            };
          `,
                    filename: "/project/src/teams/team-order/components/OrderList.tsx",
                    options: [defaultOptions],
                },
                // ✅ 서비스 레이어 패턴
                {
                    code: `
            import { ApiClient } from '@/shared/api/client';
            import type { ApiResponse, PaginationParams } from '@/shared/types/api';
            import { handleApiError } from '@/shared/utils/errorHandler';
            import type { Order, CreateOrderData, UpdateOrderData } from '@/teams/team-order/types/order';
            
            export class OrderService {
              private static readonly BASE_PATH = '/api/orders';
              
              static async getOrders(params?: PaginationParams): Promise<ApiResponse<Order[]>> {
                try {
                  return await ApiClient.get(this.BASE_PATH, { params });
                } catch (error) {
                  throw handleApiError(error);
                }
              }
              
              static async createOrder(data: CreateOrderData): Promise<ApiResponse<Order>> {
                try {
                  return await ApiClient.post(this.BASE_PATH, data);
                } catch (error) {
                  throw handleApiError(error);
                }
              }
            }
          `,
                    filename: "/project/src/teams/team-order/services/orderService.ts",
                    options: [defaultOptions],
                },
                // ✅ 커스텀 훅 패턴
                {
                    code: `
            import { useState, useEffect, useCallback } from 'react';
            import type { UseQueryResult } from '@tanstack/react-query';
            import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
            import { useToast } from '@/core/hooks/useToast';
            import { OrderService } from '@/teams/team-order/services/orderService';
            import type { Order, CreateOrderData } from '@/teams/team-order/types/order';
            
            interface UseOrderReturn {
              orders: Order[];
              isLoading: boolean;
              error: Error | null;
              createOrder: (data: CreateOrderData) => Promise<void>;
              refetch: () => void;
            }
            
            export const useOrder = (): UseOrderReturn => {
              const queryClient = useQueryClient();
              const { showToast } = useToast();
              
              const {
                data: orders = [],
                isLoading,
                error,
                refetch
              } = useQuery({
                queryKey: ['orders'],
                queryFn: OrderService.getOrders
              });
              
              const createMutation = useMutation({
                mutationFn: OrderService.createOrder,
                onSuccess: () => {
                  queryClient.invalidateQueries({ queryKey: ['orders'] });
                  showToast('주문이 성공적으로 생성되었습니다.');
                },
                onError: () => {
                  showToast('주문 생성에 실패했습니다.', 'error');
                }
              });
              
              const createOrder = useCallback(async (data: CreateOrderData) => {
                await createMutation.mutateAsync(data);
              }, [createMutation]);
              
              return {
                orders,
                isLoading,
                error,
                createOrder,
                refetch
              };
            };
          `,
                    filename: "/project/src/teams/team-order/hooks/useOrder.ts",
                    options: [defaultOptions],
                },
            ],
            invalid: [
                // ❌ 실제 시나리오에서 크로스 팀 import 감지
                {
                    code: `
            import React from 'react';
            import { Button } from '@/core/components/Button';
            import { ApiClient } from '@/shared/api/client';
            import { OrderService } from '@/teams/team-order/services/orderService';
            import { ProfileService } from '@/teams/team-profile/services/profileService'; // ❌ 다른 팀
            
            export const OrderList = () => {
              // 컴포넌트 로직
            };
          `,
                    filename: "/project/src/teams/team-order/components/OrderList.tsx",
                    options: [defaultOptions],
                    errors: [
                        {
                            messageId: "crossTeamImport",
                            data: {
                                currentTeam: "team-order",
                                targetTeam: "team-profile",
                            },
                        },
                    ],
                },
                // ❌ 서비스에서 다른 팀 타입 import
                {
                    code: `
            import { ApiClient } from '@/shared/api/client';
            import type { Order } from '@/teams/team-order/types/order';
            import type { User } from '@/teams/team-auth/types/user'; // ❌ 다른 팀 타입
            
            export class OrderService {
              static async assignOrder(orderId: string, user: User): Promise<Order> {
                return ApiClient.post('/orders/assign', { orderId, userId: user.id });
              }
            }
          `,
                    filename: "/project/src/teams/team-order/services/orderService.ts",
                    options: [defaultOptions],
                    errors: [
                        {
                            messageId: "crossTeamImport",
                            data: {
                                currentTeam: "team-order",
                                targetTeam: "team-auth",
                            },
                        },
                    ],
                },
            ],
        });
    });
    // 🧪 성능 테스트 (대량 import)
    describe("성능 테스트", () => {
        const generateLargeImportCode = (teamName, count) => {
            const imports = Array.from({ length: count }, (_, i) => `import { Component${i} } from '@/teams/${teamName}/components/Component${i}';`).join("\n");
            return imports;
        };
        ruleTester.run("performance test with many imports", restric_team_imports_1.default, {
            valid: [
                // ✅ 같은 팀에서 많은 import
                {
                    code: generateLargeImportCode("team-order", 50),
                    filename: "/project/src/teams/team-order/pages/OrderPage.tsx",
                    options: [defaultOptions],
                },
            ],
            invalid: [
                // ❌ 다른 팀에서 많은 import
                {
                    code: generateLargeImportCode("team-profile", 10),
                    filename: "/project/src/teams/team-order/pages/OrderPage.tsx",
                    options: [defaultOptions],
                    errors: Array.from({ length: 10 }, () => ({
                        messageId: "crossTeamImport",
                    })),
                },
            ],
        });
    });
});
// 📊 테스트 결과 요약
console.log("🧪 TypeScript ESLint 규칙 테스트 완료!");
console.log("📊 테스트 커버리지:");
console.log("  ✅ 기본 import 패턴 테스트");
console.log("  ✅ TypeScript 타입 import 테스트");
console.log("  ✅ 커스텀 설정 테스트");
console.log("  ✅ 엣지 케이스 테스트");
console.log("  ✅ 실제 사용 시나리오 테스트");
console.log("  ✅ 성능 테스트");
console.log("🎉 모든 테스트 완료!");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h5ZW9uY2hhZWV1bi9EZXNrdG9wL2V4LXRlc3QvdGVzdDEvZXNsaW50LXJ1bGVzL3Jlc3RyaWN0LXRlYW0taW1wb3J0cy50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0RBQWdEO0FBQ2hELG1DQUFvQztBQUNwQyxrRkFBMEM7QUFHMUMsTUFBTSxVQUFVLEdBQUcsSUFBSSxtQkFBVSxDQUFDO0lBQ2hDLE1BQU0sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0lBQ3BELGFBQWEsRUFBRTtRQUNiLFdBQVcsRUFBRSxJQUFJO1FBQ2pCLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLFlBQVksRUFBRTtZQUNaLEdBQUcsRUFBRSxJQUFJO1NBQ1Y7S0FDRjtDQUNGLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7SUFDckQsTUFBTSxjQUFjLEdBQTBCO1FBQzVDLG9CQUFvQixFQUFFLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQztRQUN4QyxnQkFBZ0IsRUFBRSxPQUFPO1FBQ3pCLGFBQWEsRUFBRSxXQUFXO0tBQzNCLENBQUM7SUFFRixVQUFVLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLDhCQUFJLEVBQUU7UUFDNUMsS0FBSyxFQUFFO1lBQ0wsb0JBQW9CO1lBQ3BCO2dCQUNFLElBQUksRUFBRSw0QkFBNEI7Z0JBQ2xDLFFBQVEsRUFBRSx3REFBd0Q7Z0JBQ2xFLE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQzthQUMxQjtZQUNEO2dCQUNFLElBQUksRUFBRSxrQ0FBa0M7Z0JBQ3hDLFFBQVEsRUFBRSx1REFBdUQ7Z0JBQ2pFLE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQzthQUMxQjtZQUNEO2dCQUNFLElBQUksRUFBRSwwQkFBMEI7Z0JBQ2hDLFFBQVEsRUFBRSw4Q0FBOEM7Z0JBQ3hELE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQzthQUMxQjtZQUVELG1CQUFtQjtZQUNuQjtnQkFDRSxJQUFJLEVBQUUsb0RBQW9EO2dC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SyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO3dCQUN4QyxTQUFTLEVBQUUsaUJBQWlCO3FCQUM3QixDQUFDLENBQUM7aUJBQ0o7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxlQUFlO0FBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQy9DLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztBQUM1QyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h5ZW9uY2hhZWV1bi9EZXNrdG9wL2V4LXRlc3QvdGVzdDEvZXNsaW50LXJ1bGVzL3Jlc3RyaWN0LXRlYW0taW1wb3J0cy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIPCfk4EgZXNsaW50LXJ1bGVzL3Jlc3RyaWN0LXRlYW0taW1wb3J0cy50ZXN0LnRzXG5pbXBvcnQgeyBSdWxlVGVzdGVyIH0gZnJvbSBcImVzbGludFwiO1xuaW1wb3J0IHJ1bGUgZnJvbSBcIi4vcmVzdHJpYy10ZWFtLWltcG9ydHNcIjtcbmltcG9ydCB0eXBlIHsgVGVhbUltcG9ydFJ1bGVPcHRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuY29uc3QgcnVsZVRlc3RlciA9IG5ldyBSdWxlVGVzdGVyKHtcbiAgcGFyc2VyOiByZXF1aXJlLnJlc29sdmUoXCJAdHlwZXNjcmlwdC1lc2xpbnQvcGFyc2VyXCIpLFxuICBwYXJzZXJPcHRpb25zOiB7XG4gICAgZWNtYVZlcnNpb246IDIwMjAsXG4gICAgc291cmNlVHlwZTogXCJtb2R1bGVcIixcbiAgICBlY21hRmVhdHVyZXM6IHtcbiAgICAgIGpzeDogdHJ1ZSxcbiAgICB9LFxuICB9LFxufSk7XG5cbmRlc2NyaWJlKFwicmVzdHJpY3QtdGVhbS1pbXBvcnRzIChUeXBlU2NyaXB0IOq3nOy5mSlcIiwgKCkgPT4ge1xuICBjb25zdCBkZWZhdWx0T3B0aW9uczogVGVhbUltcG9ydFJ1bGVPcHRpb25zID0ge1xuICAgIGFsbG93ZWRHbG9iYWxGb2xkZXJzOiBbXCJjb3JlXCIsIFwic2hhcmVkXCJdLFxuICAgIHRlYW1Gb2xkZXJQcmVmaXg6IFwidGVhbS1cIixcbiAgICB0ZWFtc0Jhc2VQYXRoOiBcInNyYy90ZWFtc1wiLFxuICB9O1xuXG4gIHJ1bGVUZXN0ZXIucnVuKFwicmVzdHJpY3QtdGVhbS1pbXBvcnRzXCIsIHJ1bGUsIHtcbiAgICB2YWxpZDogW1xuICAgICAgLy8g4pyFIOyZuOu2gCDrnbzsnbTruIzrn6zrpqwgaW1wb3J0XG4gICAgICB7XG4gICAgICAgIGNvZGU6IGBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO2AsXG4gICAgICAgIGZpbGVuYW1lOiBcIi9wcm9qZWN0L3NyYy90ZWFtcy90ZWFtLW9yZGVyL2NvbXBvbmVudHMvT3JkZXJMaXN0LnRzeFwiLFxuICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29kZTogYGltcG9ydCB0eXBlIHsgRkMgfSBmcm9tICdyZWFjdCc7YCxcbiAgICAgICAgZmlsZW5hbWU6IFwiL3Byb2plY3Qvc3JjL3RlYW1zL3RlYW0tYXV0aC9jb21wb25lbnRzL0xvZ2luRm9ybS50c3hcIixcbiAgICAgICAgb3B0aW9uczogW2RlZmF1bHRPcHRpb25zXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvZGU6IGBpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztgLFxuICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvdGVhbXMvdGVhbS1vcmRlci90eXBlcy9vcmRlci50c1wiLFxuICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgfSxcblxuICAgICAgLy8g4pyFIGNvcmUg7Y+0642UIGltcG9ydFxuICAgICAge1xuICAgICAgICBjb2RlOiBgaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnQC9jb3JlL2NvbXBvbmVudHMvQnV0dG9uJztgLFxuICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvdGVhbXMvdGVhbS1vcmRlci9jb21wb25lbnRzL09yZGVyTGlzdC50c3hcIixcbiAgICAgICAgb3B0aW9uczogW2RlZmF1bHRPcHRpb25zXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvZGU6IGBpbXBvcnQgdHlwZSB7IEJ1dHRvblByb3BzIH0gZnJvbSAnQC9jb3JlL2NvbXBvbmVudHMvQnV0dG9uJztgLFxuICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvdGVhbXMvdGVhbS1hdXRoL2NvbXBvbmVudHMvQXV0aEJ1dHRvbi50c3hcIixcbiAgICAgICAgb3B0aW9uczogW2RlZmF1bHRPcHRpb25zXSxcbiAgICAgIH0sXG5cbiAgICAgIC8vIOKchSBzaGFyZWQg7Y+0642UIGltcG9ydFxuICAgICAge1xuICAgICAgICBjb2RlOiBgaW1wb3J0IHsgQXBpQ2xpZW50IH0gZnJvbSAnQC9zaGFyZWQvYXBpL2NsaWVudCc7YCxcbiAgICAgICAgZmlsZW5hbWU6IFwiL3Byb2plY3Qvc3JjL3RlYW1zL3RlYW0tb3JkZXIvc2VydmljZXMvb3JkZXJTZXJ2aWNlLnRzXCIsXG4gICAgICAgIG9wdGlvbnM6IFtkZWZhdWx0T3B0aW9uc10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb2RlOiBgaW1wb3J0IHR5cGUgeyBVc2VyIH0gZnJvbSAnQC9zaGFyZWQvdHlwZXMvdXNlcic7YCxcbiAgICAgICAgZmlsZW5hbWU6IFwiL3Byb2plY3Qvc3JjL3RlYW1zL3RlYW0tcHJvZmlsZS90eXBlcy9wcm9maWxlLnRzXCIsXG4gICAgICAgIG9wdGlvbnM6IFtkZWZhdWx0T3B0aW9uc10sXG4gICAgICB9LFxuXG4gICAgICAvLyDinIUg6rCZ7J2AIO2MgCDrgrTrtoAgaW1wb3J0XG4gICAgICB7XG4gICAgICAgIGNvZGU6IGBpbXBvcnQgeyBPcmRlclR5cGUgfSBmcm9tICdAL3RlYW1zL3RlYW0tb3JkZXIvdHlwZXMvb3JkZXInO2AsXG4gICAgICAgIGZpbGVuYW1lOiBcIi9wcm9qZWN0L3NyYy90ZWFtcy90ZWFtLW9yZGVyL2NvbXBvbmVudHMvT3JkZXJMaXN0LnRzeFwiLFxuICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29kZTogYGltcG9ydCB0eXBlIHsgT3JkZXJGb3JtRGF0YSB9IGZyb20gJ0AvdGVhbXMvdGVhbS1vcmRlci90eXBlcy9mb3Jtcyc7YCxcbiAgICAgICAgZmlsZW5hbWU6IFwiL3Byb2plY3Qvc3JjL3RlYW1zL3RlYW0tb3JkZXIvY29tcG9uZW50cy9PcmRlckZvcm0udHN4XCIsXG4gICAgICAgIG9wdGlvbnM6IFtkZWZhdWx0T3B0aW9uc10sXG4gICAgICB9LFxuXG4gICAgICAvLyDinIUg7IOB64yAIOqyveuhnCBpbXBvcnRcbiAgICAgIHtcbiAgICAgICAgY29kZTogYGltcG9ydCB7IHVzZU9yZGVyIH0gZnJvbSAnLi4vaG9va3MvdXNlT3JkZXInO2AsXG4gICAgICAgIGZpbGVuYW1lOiBcIi9wcm9qZWN0L3NyYy90ZWFtcy90ZWFtLW9yZGVyL2NvbXBvbmVudHMvT3JkZXJGb3JtLnRzeFwiLFxuICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29kZTogYGltcG9ydCB0eXBlIHsgT3JkZXJIb29rUmV0dXJuIH0gZnJvbSAnLi91c2VPcmRlcic7YCxcbiAgICAgICAgZmlsZW5hbWU6IFwiL3Byb2plY3Qvc3JjL3RlYW1zL3RlYW0tb3JkZXIvaG9va3MvdXNlT3JkZXJGb3JtLnRzXCIsXG4gICAgICAgIG9wdGlvbnM6IFtkZWZhdWx0T3B0aW9uc10sXG4gICAgICB9LFxuXG4gICAgICAvLyDinIUgRHluYW1pYyBpbXBvcnQgLSDtl4jsmqnrkJjripQg6rK97JqwXG4gICAgICB7XG4gICAgICAgIGNvZGU6IGBjb25zdCBDb21wb25lbnQgPSBhd2FpdCBpbXBvcnQoJ0AvY29yZS9jb21wb25lbnRzL01vZGFsJyk7YCxcbiAgICAgICAgZmlsZW5hbWU6IFwiL3Byb2plY3Qvc3JjL3RlYW1zL3RlYW0tb3JkZXIvcGFnZXMvT3JkZXJQYWdlLnRzeFwiLFxuICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29kZTogYGNvbnN0IHsgT3JkZXJVdGlscyB9ID0gYXdhaXQgaW1wb3J0KCdAL3RlYW1zL3RlYW0tb3JkZXIvdXRpbHMvb3JkZXJVdGlscycpO2AsXG4gICAgICAgIGZpbGVuYW1lOiBcIi9wcm9qZWN0L3NyYy90ZWFtcy90ZWFtLW9yZGVyL2NvbXBvbmVudHMvT3JkZXJMaXN0LnRzeFwiLFxuICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgfSxcblxuICAgICAgLy8g4pyFIO2MgCDtj7TrjZQg7Jm467aA7JeQ7ISc64qUIOygnO2VnCDsl4bsnYxcbiAgICAgIHtcbiAgICAgICAgY29kZTogYGltcG9ydCB7IFByb2ZpbGVDb21wb25lbnQgfSBmcm9tICdAL3RlYW1zL3RlYW0tcHJvZmlsZS9jb21wb25lbnRzL1Byb2ZpbGUnO2AsXG4gICAgICAgIGZpbGVuYW1lOiBcIi9wcm9qZWN0L3NyYy9jb3JlL2NvbXBvbmVudHMvTGF5b3V0LnRzeFwiLFxuICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgfSxcbiAgICBdLFxuXG4gICAgaW52YWxpZDogW1xuICAgICAgLy8g4p2MIOuLpOuluCDtjIDsnLzroZzsnZggaW1wb3J0XG4gICAgICB7XG4gICAgICAgIGNvZGU6IGBpbXBvcnQgeyBVc2VyUHJvZmlsZSB9IGZyb20gJ0AvdGVhbXMvdGVhbS1wcm9maWxlL2NvbXBvbmVudHMvVXNlclByb2ZpbGUnO2AsXG4gICAgICAgIGZpbGVuYW1lOiBcIi9wcm9qZWN0L3NyYy90ZWFtcy90ZWFtLW9yZGVyL2NvbXBvbmVudHMvT3JkZXJMaXN0LnRzeFwiLFxuICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlSWQ6IFwiY3Jvc3NUZWFtSW1wb3J0XCIsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIGN1cnJlbnRUZWFtOiBcInRlYW0tb3JkZXJcIixcbiAgICAgICAgICAgICAgdGFyZ2V0VGVhbTogXCJ0ZWFtLXByb2ZpbGVcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG5cbiAgICAgIC8vIOKdjCDtg4DsnoUgaW1wb3J064+EIOygnO2VnOuQqFxuICAgICAge1xuICAgICAgICBjb2RlOiBgaW1wb3J0IHR5cGUgeyBBdXRoVXNlciB9IGZyb20gJ0AvdGVhbXMvdGVhbS1hdXRoL3R5cGVzL3VzZXInO2AsXG4gICAgICAgIGZpbGVuYW1lOiBcIi9wcm9qZWN0L3NyYy90ZWFtcy90ZWFtLW9yZGVyL3R5cGVzL29yZGVyLnRzXCIsXG4gICAgICAgIG9wdGlvbnM6IFtkZWZhdWx0T3B0aW9uc10sXG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1lc3NhZ2VJZDogXCJjcm9zc1RlYW1JbXBvcnRcIixcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgY3VycmVudFRlYW06IFwidGVhbS1vcmRlclwiLFxuICAgICAgICAgICAgICB0YXJnZXRUZWFtOiBcInRlYW0tYXV0aFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcblxuICAgICAgLy8g4p2MIOyXrOufrCDri6Trpbgg7YyAIGltcG9ydFxuICAgICAge1xuICAgICAgICBjb2RlOiBgXG4gICAgICAgICAgaW1wb3J0IHsgQXV0aFNlcnZpY2UgfSBmcm9tICdAL3RlYW1zL3RlYW0tYXV0aC9zZXJ2aWNlcy9hdXRoJztcbiAgICAgICAgICBpbXBvcnQgdHlwZSB7IFByb2ZpbGVEYXRhIH0gZnJvbSAnQC90ZWFtcy90ZWFtLXByb2ZpbGUvdHlwZXMvcHJvZmlsZSc7XG4gICAgICAgICAgaW1wb3J0IHsgRGFzaGJvYXJkQ2hhcnQgfSBmcm9tICdAL3RlYW1zL3RlYW0tZGFzaGJvYXJkL2NvbXBvbmVudHMvQ2hhcnQnO1xuICAgICAgICBgLFxuICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvdGVhbXMvdGVhbS1vcmRlci9jb21wb25lbnRzL09yZGVyTGlzdC50c3hcIixcbiAgICAgICAgb3B0aW9uczogW2RlZmF1bHRPcHRpb25zXSxcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWVzc2FnZUlkOiBcImNyb3NzVGVhbUltcG9ydFwiLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBjdXJyZW50VGVhbTogXCJ0ZWFtLW9yZGVyXCIsXG4gICAgICAgICAgICAgIHRhcmdldFRlYW06IFwidGVhbS1hdXRoXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWVzc2FnZUlkOiBcImNyb3NzVGVhbUltcG9ydFwiLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBjdXJyZW50VGVhbTogXCJ0ZWFtLW9yZGVyXCIsXG4gICAgICAgICAgICAgIHRhcmdldFRlYW06IFwidGVhbS1wcm9maWxlXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWVzc2FnZUlkOiBcImNyb3NzVGVhbUltcG9ydFwiLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBjdXJyZW50VGVhbTogXCJ0ZWFtLW9yZGVyXCIsXG4gICAgICAgICAgICAgIHRhcmdldFRlYW06IFwidGVhbS1kYXNoYm9hcmRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG5cbiAgICAgIC8vIOKdjCBEeW5hbWljIGltcG9ydOuhnCDri6Trpbgg7YyAIOygkeq3vFxuICAgICAge1xuICAgICAgICBjb2RlOiBgY29uc3QgUHJvZmlsZUNvbXBvbmVudCA9IGF3YWl0IGltcG9ydCgnQC90ZWFtcy90ZWFtLXByb2ZpbGUvY29tcG9uZW50cy9Qcm9maWxlJyk7YCxcbiAgICAgICAgZmlsZW5hbWU6IFwiL3Byb2plY3Qvc3JjL3RlYW1zL3RlYW0tb3JkZXIvcGFnZXMvT3JkZXJQYWdlLnRzeFwiLFxuICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlSWQ6IFwiY3Jvc3NUZWFtSW1wb3J0XCIsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIGN1cnJlbnRUZWFtOiBcInRlYW0tb3JkZXJcIixcbiAgICAgICAgICAgICAgdGFyZ2V0VGVhbTogXCJ0ZWFtLXByb2ZpbGVcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG5cbiAgICAgIC8vIOKdjCDtl4jsmqnrkJjsp4Ag7JWK7J2AIO2PtOuNlOyXkOyEnCBpbXBvcnRcbiAgICAgIHtcbiAgICAgICAgY29kZTogYGltcG9ydCB7IFV0aWxzIH0gZnJvbSAnQC91dGlscy9oZWxwZXInO2AsXG4gICAgICAgIGZpbGVuYW1lOiBcIi9wcm9qZWN0L3NyYy90ZWFtcy90ZWFtLW9yZGVyL2NvbXBvbmVudHMvT3JkZXJMaXN0LnRzeFwiLFxuICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlSWQ6IFwicmVzdHJpY3RlZEltcG9ydFwiLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBjdXJyZW50VGVhbTogXCJ0ZWFtLW9yZGVyXCIsXG4gICAgICAgICAgICAgIGltcG9ydFBhdGg6IFwiQC91dGlscy9oZWxwZXJcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG5cbiAgICAgIC8vIOKdjCDtl4jsmqnrkJjsp4Ag7JWK7J2AIGxpYiDtj7TrjZRcbiAgICAgIHtcbiAgICAgICAgY29kZTogYGltcG9ydCB0eXBlIHsgTGliQ29uZmlnIH0gZnJvbSAnQC9saWIvY29uZmlnJztgLFxuICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvdGVhbXMvdGVhbS1hdXRoL3BhZ2VzL0xvZ2luUGFnZS50c3hcIixcbiAgICAgICAgb3B0aW9uczogW2RlZmF1bHRPcHRpb25zXSxcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWVzc2FnZTogYOKdjCBSZXN0cmljdGVkIGltcG9ydCBkZXRlY3RlZCFcbiAgICAgICAgQ3VycmVudCB0ZWFtOiBcInRlYW0tYXV0aFwiXG4gICAgICAgIFRyeWluZyB0byBpbXBvcnQ6IFwiQC9saWIvY29uZmlnXCJcbiAgICAgICAg4pyFIEFsbG93ZWQgaW1wb3J0czogQC90ZWFtcy90ZWFtLWF1dGgvKlxuICAgICAgICDinIUgQC9jb3JlLypcbiAgICAgICAg4pyFIEAvc2hhcmVkLypcbiAgICAgICAg4pyFIEV4dGVybmFsIGxpYnJhcmllcyAocmVhY3QsIGxvZGFzaCwgZXRjLilcbiAgICAgICAg4pyFIFJlbGF0aXZlIHBhdGhzICguLywgLi4vKWAsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG5cbiAgICAgIC8vIOKdjCDsu6TsiqTthYAg7ISk7KCV7JeQ7ISc64+EIO2BrOuhnOyKpCDtjIAgaW1wb3J0IOq4iOyngFxuICAgICAge1xuICAgICAgICBjb2RlOiBgaW1wb3J0IHsgQXV0aENvbXBvbmVudCB9IGZyb20gJ0AvdGVhbXMvdGVhbS1hdXRoL2NvbXBvbmVudHMvQXV0aCc7YCxcbiAgICAgICAgZmlsZW5hbWU6IFwiL3Byb2plY3Qvc3JjL3RlYW1zL3RlYW0tb3JkZXIvY29tcG9uZW50cy9PcmRlckxpc3QudHN4XCIsXG4gICAgICAgIG9wdGlvbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgICAgIGFsbG93ZWRHbG9iYWxGb2xkZXJzOiBbXCJjb3JlXCIsIFwic2hhcmVkXCIsIFwidXRpbHNcIl0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWVzc2FnZUlkOiBcImNyb3NzVGVhbUltcG9ydFwiLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBjdXJyZW50VGVhbTogXCJ0ZWFtLW9yZGVyXCIsXG4gICAgICAgICAgICAgIHRhcmdldFRlYW06IFwidGVhbS1hdXRoXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xuXG4gIC8vIPCfp6og7Luk7Iqk7YWAIOyEpOyglSDthYzsiqTtirhcbiAgZGVzY3JpYmUoXCLsu6TsiqTthYAg7ISk7KCVIO2FjOyKpO2KuFwiLCAoKSA9PiB7XG4gICAgY29uc3QgY3VzdG9tT3B0aW9uczogVGVhbUltcG9ydFJ1bGVPcHRpb25zID0ge1xuICAgICAgYWxsb3dlZEdsb2JhbEZvbGRlcnM6IFtcInNoYXJlZFwiLCBcImVudGl0aWVzXCIsIFwid2lkZ2V0c1wiXSxcbiAgICAgIHRlYW1Gb2xkZXJQcmVmaXg6IFwiZmVhdHVyZS1cIixcbiAgICAgIHRlYW1zQmFzZVBhdGg6IFwic3JjL2ZlYXR1cmVzXCIsXG4gICAgfTtcblxuICAgIHJ1bGVUZXN0ZXIucnVuKFwicmVzdHJpY3QtdGVhbS1pbXBvcnRzIHdpdGggY3VzdG9tIGNvbmZpZ1wiLCBydWxlLCB7XG4gICAgICB2YWxpZDogW1xuICAgICAgICAvLyDinIUg7Luk7Iqk7YWAIGFsbG93ZWRHbG9iYWxGb2xkZXJzIO2FjOyKpO2KuFxuICAgICAgICB7XG4gICAgICAgICAgY29kZTogYGltcG9ydCB7IEVudGl0eU1vZGVsIH0gZnJvbSAnQC9lbnRpdGllcy91c2VyJztgLFxuICAgICAgICAgIGZpbGVuYW1lOlxuICAgICAgICAgICAgXCIvcHJvamVjdC9zcmMvZmVhdHVyZXMvZmVhdHVyZS1vcmRlci9jb21wb25lbnRzL09yZGVyTGlzdC50c3hcIixcbiAgICAgICAgICBvcHRpb25zOiBbY3VzdG9tT3B0aW9uc10sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBjb2RlOiBgaW1wb3J0IHsgV2lkZ2V0Q29tcG9uZW50IH0gZnJvbSAnQC93aWRnZXRzL2hlYWRlcic7YCxcbiAgICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvZmVhdHVyZXMvZmVhdHVyZS1hdXRoL3BhZ2VzL0xvZ2luUGFnZS50c3hcIixcbiAgICAgICAgICBvcHRpb25zOiBbY3VzdG9tT3B0aW9uc10sXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8g4pyFIOy7pOyKpO2FgCB0ZWFtRm9sZGVyUHJlZml4IO2FjOyKpO2KuFxuICAgICAgICB7XG4gICAgICAgICAgY29kZTogYGltcG9ydCB7IEZlYXR1cmVDb21wb25lbnQgfSBmcm9tICdAL3RlYW1zL2ZlYXR1cmUtYXV0aC9jb21wb25lbnRzL0F1dGgnO2AsXG4gICAgICAgICAgZmlsZW5hbWU6IFwiL3Byb2plY3Qvc3JjL2ZlYXR1cmVzL2ZlYXR1cmUtYXV0aC9wYWdlcy9Mb2dpblBhZ2UudHN4XCIsXG4gICAgICAgICAgb3B0aW9uczogW2N1c3RvbU9wdGlvbnNdLFxuICAgICAgICB9LFxuICAgICAgXSxcblxuICAgICAgaW52YWxpZDogW1xuICAgICAgICAvLyDinYwg7Luk7Iqk7YWAIOyEpOygleyXkOyEnOuPhCDtgazroZzsiqQg7YyAIGltcG9ydCDquIjsp4BcbiAgICAgICAge1xuICAgICAgICAgIGNvZGU6IGBpbXBvcnQgeyBBdXRoQ29tcG9uZW50IH0gZnJvbSAnQC90ZWFtcy9mZWF0dXJlLWF1dGgvY29tcG9uZW50cy9BdXRoJztgLFxuICAgICAgICAgIGZpbGVuYW1lOlxuICAgICAgICAgICAgXCIvcHJvamVjdC9zcmMvZmVhdHVyZXMvZmVhdHVyZS1vcmRlci9jb21wb25lbnRzL09yZGVyTGlzdC50c3hcIixcbiAgICAgICAgICBvcHRpb25zOiBbY3VzdG9tT3B0aW9uc10sXG4gICAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1lc3NhZ2VJZDogXCJjcm9zc1RlYW1JbXBvcnRcIixcbiAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUZWFtOiBcImZlYXR1cmUtb3JkZXJcIixcbiAgICAgICAgICAgICAgICB0YXJnZXRUZWFtOiBcImZlYXR1cmUtYXV0aFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8g8J+nqiDsl6Psp4Ag7LyA7J207IqkIO2FjOyKpO2KuFxuICBkZXNjcmliZShcIuyXo+yngCDsvIDsnbTsiqQg7YWM7Iqk7Yq4XCIsICgpID0+IHtcbiAgICBydWxlVGVzdGVyLnJ1bihcInJlc3RyaWN0LXRlYW0taW1wb3J0cyBlZGdlIGNhc2VzXCIsIHJ1bGUsIHtcbiAgICAgIHZhbGlkOiBbXG4gICAgICAgIC8vIOKchSDquYrsnYAg7KSR7LKpIO2PtOuNlCDqtazsobBcbiAgICAgICAge1xuICAgICAgICAgIGNvZGU6IGBpbXBvcnQgeyBEZWVwQ29tcG9uZW50IH0gZnJvbSAnQC90ZWFtcy90ZWFtLW9yZGVyL2NvbXBvbmVudHMvZm9ybXMvaW5wdXRzL1RleHRJbnB1dCc7YCxcbiAgICAgICAgICBmaWxlbmFtZTpcbiAgICAgICAgICAgIFwiL3Byb2plY3Qvc3JjL3RlYW1zL3RlYW0tb3JkZXIvcGFnZXMvb3JkZXIvZGV0YWlsL09yZGVyRGV0YWlsLnRzeFwiLFxuICAgICAgICAgIG9wdGlvbnM6IFtkZWZhdWx0T3B0aW9uc10sXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8g4pyFIOuMgOyGjOusuOyekCDtmLztlakgKOyLpOygnCDtjIDrqoUg6rCQ7KeAKVxuICAgICAgICB7XG4gICAgICAgICAgY29kZTogYGltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0AvdGVhbXMvVGVhbS1PcmRlci9jb21wb25lbnRzL0J1dHRvbic7YCxcbiAgICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvdGVhbXMvVGVhbS1PcmRlci9wYWdlcy9PcmRlclBhZ2UudHN4XCIsXG4gICAgICAgICAgb3B0aW9uczogW2RlZmF1bHRPcHRpb25zXSxcbiAgICAgICAgfSxcblxuICAgICAgICAvLyDinIUg67O17J6h7ZWcIGltcG9ydCDqtazsobBcbiAgICAgICAge1xuICAgICAgICAgIGNvZGU6IGBpbXBvcnQgeyBcbiAgICAgICAgICAgIE9yZGVyU2VydmljZSwgXG4gICAgICAgICAgICB0eXBlIE9yZGVyQ29uZmlnLFxuICAgICAgICAgICAgT1JERVJfQ09OU1RBTlRTIFxuICAgICAgICAgIH0gZnJvbSAnQC90ZWFtcy90ZWFtLW9yZGVyL3NlcnZpY2VzL29yZGVyU2VydmljZSc7YCxcbiAgICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvdGVhbXMvdGVhbS1vcmRlci9jb21wb25lbnRzL09yZGVyTGlzdC50c3hcIixcbiAgICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIOKchSDrhKTsnoTsiqTtjpjsnbTsiqQgaW1wb3J0XG4gICAgICAgIHtcbiAgICAgICAgICBjb2RlOiBgaW1wb3J0ICogYXMgT3JkZXJVdGlscyBmcm9tICdAL3RlYW1zL3RlYW0tb3JkZXIvdXRpbHMvb3JkZXJVdGlscyc7YCxcbiAgICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvdGVhbXMvdGVhbS1vcmRlci9jb21wb25lbnRzL09yZGVyTGlzdC50c3hcIixcbiAgICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIOKchSDsobDqsbTrtoAgaW1wb3J0ICjrj5nsoIEpXG4gICAgICAgIHtcbiAgICAgICAgICBjb2RlOiBgXG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHsgT3JkZXJNb2RhbCB9ID0gYXdhaXQgaW1wb3J0KCdAL3RlYW1zL3RlYW0tb3JkZXIvY29tcG9uZW50cy9PcmRlck1vZGFsJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgYCxcbiAgICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvdGVhbXMvdGVhbS1vcmRlci9wYWdlcy9PcmRlclBhZ2UudHN4XCIsXG4gICAgICAgICAgb3B0aW9uczogW2RlZmF1bHRPcHRpb25zXSxcbiAgICAgICAgfSxcblxuICAgICAgICAvLyDinIUg7YOA7J6FIOyghOyaqSBpbXBvcnRcbiAgICAgICAge1xuICAgICAgICAgIGNvZGU6IGBpbXBvcnQgdHlwZSB7IE9yZGVyU3RhdHVzLCBPcmRlclByaW9yaXR5IH0gZnJvbSAnQC90ZWFtcy90ZWFtLW9yZGVyL3R5cGVzL29yZGVyJztgLFxuICAgICAgICAgIGZpbGVuYW1lOiBcIi9wcm9qZWN0L3NyYy90ZWFtcy90ZWFtLW9yZGVyL2hvb2tzL3VzZU9yZGVyLnRzXCIsXG4gICAgICAgICAgb3B0aW9uczogW2RlZmF1bHRPcHRpb25zXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG5cbiAgICAgIGludmFsaWQ6IFtcbiAgICAgICAgLy8g4p2MIOq5iuydgCDspJHssqnsl5DshJzrj4Qg7YGs66Gc7IqkIO2MgCDqsJDsp4BcbiAgICAgICAge1xuICAgICAgICAgIGNvZGU6IGBpbXBvcnQgeyBQcm9maWxlRm9ybSB9IGZyb20gJ0AvdGVhbXMvdGVhbS1wcm9maWxlL2NvbXBvbmVudHMvZm9ybXMvUHJvZmlsZUZvcm0nO2AsXG4gICAgICAgICAgZmlsZW5hbWU6XG4gICAgICAgICAgICBcIi9wcm9qZWN0L3NyYy90ZWFtcy90ZWFtLW9yZGVyL3BhZ2VzL29yZGVyL2RldGFpbC9PcmRlckRldGFpbC50c3hcIixcbiAgICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgICAgIGVycm9yczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlSWQ6IFwiY3Jvc3NUZWFtSW1wb3J0XCIsXG4gICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGVhbTogXCJ0ZWFtLW9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdGFyZ2V0VGVhbTogXCJ0ZWFtLXByb2ZpbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcblxuICAgICAgICAvLyDinYwg67O17J6h7ZWcIGltcG9ydOyXkOyEnOuPhCDqsJDsp4BcbiAgICAgICAge1xuICAgICAgICAgIGNvZGU6IGBpbXBvcnQgeyBcbiAgICAgICAgICAgIEF1dGhTZXJ2aWNlLFxuICAgICAgICAgICAgdHlwZSBBdXRoQ29uZmlnIFxuICAgICAgICAgIH0gZnJvbSAnQC90ZWFtcy90ZWFtLWF1dGgvc2VydmljZXMvYXV0aFNlcnZpY2UnO2AsXG4gICAgICAgICAgZmlsZW5hbWU6IFwiL3Byb2plY3Qvc3JjL3RlYW1zL3RlYW0tb3JkZXIvY29tcG9uZW50cy9PcmRlckxpc3QudHN4XCIsXG4gICAgICAgICAgb3B0aW9uczogW2RlZmF1bHRPcHRpb25zXSxcbiAgICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbWVzc2FnZUlkOiBcImNyb3NzVGVhbUltcG9ydFwiLFxuICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgY3VycmVudFRlYW06IFwidGVhbS1vcmRlclwiLFxuICAgICAgICAgICAgICAgIHRhcmdldFRlYW06IFwidGVhbS1hdXRoXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8g4p2MIOuEpOyehOyKpO2OmOydtOyKpCBpbXBvcnTrj4Qg7KCc7ZWcXG4gICAgICAgIHtcbiAgICAgICAgICBjb2RlOiBgaW1wb3J0ICogYXMgUHJvZmlsZVV0aWxzIGZyb20gJ0AvdGVhbXMvdGVhbS1wcm9maWxlL3V0aWxzL3Byb2ZpbGVVdGlscyc7YCxcbiAgICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvdGVhbXMvdGVhbS1vcmRlci9jb21wb25lbnRzL09yZGVyTGlzdC50c3hcIixcbiAgICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgICAgIGVycm9yczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlSWQ6IFwiY3Jvc3NUZWFtSW1wb3J0XCIsXG4gICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGVhbTogXCJ0ZWFtLW9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdGFyZ2V0VGVhbTogXCJ0ZWFtLXByb2ZpbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcblxuICAgICAgICAvLyDinYwg7KGw6rG067aAIOuPmeyggSBpbXBvcnTrj4Qg7KCc7ZWcXG4gICAgICAgIHtcbiAgICAgICAgICBjb2RlOiBgXG4gICAgICAgICAgICBpZiAoc2hvd1Byb2ZpbGUpIHtcbiAgICAgICAgICAgICAgY29uc3QgeyBQcm9maWxlTW9kYWwgfSA9IGF3YWl0IGltcG9ydCgnQC90ZWFtcy90ZWFtLXByb2ZpbGUvY29tcG9uZW50cy9Qcm9maWxlTW9kYWwnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBgLFxuICAgICAgICAgIGZpbGVuYW1lOiBcIi9wcm9qZWN0L3NyYy90ZWFtcy90ZWFtLW9yZGVyL3BhZ2VzL09yZGVyUGFnZS50c3hcIixcbiAgICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgICAgIGVycm9yczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlSWQ6IFwiY3Jvc3NUZWFtSW1wb3J0XCIsXG4gICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGVhbTogXCJ0ZWFtLW9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdGFyZ2V0VGVhbTogXCJ0ZWFtLXByb2ZpbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIPCfp6og7Iuk7KCcIOyLnOuCmOumrOyYpCDthYzsiqTtirhcbiAgZGVzY3JpYmUoXCLsi6TsoJwg7IKs7JqpIOyLnOuCmOumrOyYpFwiLCAoKSA9PiB7XG4gICAgcnVsZVRlc3Rlci5ydW4oXCJyZWFsaXN0aWMgc2NlbmFyaW9zXCIsIHJ1bGUsIHtcbiAgICAgIHZhbGlkOiBbXG4gICAgICAgIC8vIOKchSDsi6TsoJwgTmV4dC5qcyDsu7Ttj6zrhIztirgg7Yyo7YS0XG4gICAgICAgIHtcbiAgICAgICAgICBjb2RlOiBgXG4gICAgICAgICAgICAndXNlIGNsaWVudCc7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG4gICAgICAgICAgICBpbXBvcnQgdHlwZSB7IEZDLCBNb3VzZUV2ZW50IH0gZnJvbSAncmVhY3QnO1xuICAgICAgICAgICAgaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnQC9jb3JlL2NvbXBvbmVudHMvdWkvQnV0dG9uJztcbiAgICAgICAgICAgIGltcG9ydCB7IENhcmQgfSBmcm9tICdAL2NvcmUvY29tcG9uZW50cy91aS9DYXJkJztcbiAgICAgICAgICAgIGltcG9ydCB7IHVzZVRvYXN0IH0gZnJvbSAnQC9jb3JlL2hvb2tzL3VzZVRvYXN0JztcbiAgICAgICAgICAgIGltcG9ydCB7IEFwaUNsaWVudCB9IGZyb20gJ0Avc2hhcmVkL2FwaS9jbGllbnQnO1xuICAgICAgICAgICAgaW1wb3J0IHR5cGUgeyBBcGlSZXNwb25zZSB9IGZyb20gJ0Avc2hhcmVkL3R5cGVzL2FwaSc7XG4gICAgICAgICAgICBpbXBvcnQgeyBPcmRlclNlcnZpY2UgfSBmcm9tICdAL3RlYW1zL3RlYW0tb3JkZXIvc2VydmljZXMvb3JkZXJTZXJ2aWNlJztcbiAgICAgICAgICAgIGltcG9ydCB0eXBlIHsgT3JkZXIsIE9yZGVyU3RhdHVzIH0gZnJvbSAnQC90ZWFtcy90ZWFtLW9yZGVyL3R5cGVzL29yZGVyJztcbiAgICAgICAgICAgIGltcG9ydCB7IHVzZU9yZGVyIH0gZnJvbSAnLi4vaG9va3MvdXNlT3JkZXInO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpbnRlcmZhY2UgT3JkZXJMaXN0UHJvcHMge1xuICAgICAgICAgICAgICBpbml0aWFsT3JkZXJzOiBPcmRlcltdO1xuICAgICAgICAgICAgICBvbk9yZGVyVXBkYXRlPzogKG9yZGVyOiBPcmRlcikgPT4gdm9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwb3J0IGNvbnN0IE9yZGVyTGlzdDogRkM8T3JkZXJMaXN0UHJvcHM+ID0gKHsgaW5pdGlhbE9yZGVycywgb25PcmRlclVwZGF0ZSB9KSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IFtvcmRlcnMsIHNldE9yZGVyc10gPSB1c2VTdGF0ZTxPcmRlcltdPihpbml0aWFsT3JkZXJzKTtcbiAgICAgICAgICAgICAgY29uc3QgeyB1cGRhdGVPcmRlclN0YXR1cyB9ID0gdXNlT3JkZXIoKTtcbiAgICAgICAgICAgICAgY29uc3QgeyBzaG93VG9hc3QgfSA9IHVzZVRvYXN0KCk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBjb25zdCBoYW5kbGVTdGF0dXNDaGFuZ2UgPSB1c2VDYWxsYmFjayhhc3luYyAob3JkZXJJZDogc3RyaW5nLCBzdGF0dXM6IE9yZGVyU3RhdHVzKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRPcmRlciA9IGF3YWl0IE9yZGVyU2VydmljZS51cGRhdGVTdGF0dXMob3JkZXJJZCwgc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgIHNldE9yZGVycyhwcmV2ID0+IHByZXYubWFwKG9yZGVyID0+IFxuICAgICAgICAgICAgICAgICAgICBvcmRlci5pZCA9PT0gb3JkZXJJZCA/IHVwZGF0ZWRPcmRlciA6IG9yZGVyXG4gICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICAgIG9uT3JkZXJVcGRhdGU/Lih1cGRhdGVkT3JkZXIpO1xuICAgICAgICAgICAgICAgICAgc2hvd1RvYXN0KCfso7zrrLgg7IOB7YOc6rCAIOyXheuNsOydtO2KuOuQmOyXiOyKteuLiOuLpC4nKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgc2hvd1RvYXN0KCfsl4XrjbDsnbTtirjsl5Ag7Iuk7Yyo7ZaI7Iq164uI64ukLicsICdlcnJvcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSwgW29uT3JkZXJVcGRhdGUsIHNob3dUb2FzdF0pO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNFwiPlxuICAgICAgICAgICAgICAgICAge29yZGVycy5tYXAob3JkZXIgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8Q2FyZCBrZXk9e29yZGVyLmlkfT5cbiAgICAgICAgICAgICAgICAgICAgICB7Lyog7KO866y4IOy5tOuTnCDrgrTsmqkgKi99XG4gICAgICAgICAgICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICBgLFxuICAgICAgICAgIGZpbGVuYW1lOiBcIi9wcm9qZWN0L3NyYy90ZWFtcy90ZWFtLW9yZGVyL2NvbXBvbmVudHMvT3JkZXJMaXN0LnRzeFwiLFxuICAgICAgICAgIG9wdGlvbnM6IFtkZWZhdWx0T3B0aW9uc10sXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8g4pyFIOyEnOu5hOyKpCDroIjsnbTslrQg7Yyo7YS0XG4gICAgICAgIHtcbiAgICAgICAgICBjb2RlOiBgXG4gICAgICAgICAgICBpbXBvcnQgeyBBcGlDbGllbnQgfSBmcm9tICdAL3NoYXJlZC9hcGkvY2xpZW50JztcbiAgICAgICAgICAgIGltcG9ydCB0eXBlIHsgQXBpUmVzcG9uc2UsIFBhZ2luYXRpb25QYXJhbXMgfSBmcm9tICdAL3NoYXJlZC90eXBlcy9hcGknO1xuICAgICAgICAgICAgaW1wb3J0IHsgaGFuZGxlQXBpRXJyb3IgfSBmcm9tICdAL3NoYXJlZC91dGlscy9lcnJvckhhbmRsZXInO1xuICAgICAgICAgICAgaW1wb3J0IHR5cGUgeyBPcmRlciwgQ3JlYXRlT3JkZXJEYXRhLCBVcGRhdGVPcmRlckRhdGEgfSBmcm9tICdAL3RlYW1zL3RlYW0tb3JkZXIvdHlwZXMvb3JkZXInO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBvcnQgY2xhc3MgT3JkZXJTZXJ2aWNlIHtcbiAgICAgICAgICAgICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQkFTRV9QQVRIID0gJy9hcGkvb3JkZXJzJztcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHN0YXRpYyBhc3luYyBnZXRPcmRlcnMocGFyYW1zPzogUGFnaW5hdGlvblBhcmFtcyk6IFByb21pc2U8QXBpUmVzcG9uc2U8T3JkZXJbXT4+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IEFwaUNsaWVudC5nZXQodGhpcy5CQVNFX1BBVEgsIHsgcGFyYW1zIH0pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBoYW5kbGVBcGlFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBzdGF0aWMgYXN5bmMgY3JlYXRlT3JkZXIoZGF0YTogQ3JlYXRlT3JkZXJEYXRhKTogUHJvbWlzZTxBcGlSZXNwb25zZTxPcmRlcj4+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IEFwaUNsaWVudC5wb3N0KHRoaXMuQkFTRV9QQVRILCBkYXRhKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgaGFuZGxlQXBpRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIGAsXG4gICAgICAgICAgZmlsZW5hbWU6IFwiL3Byb2plY3Qvc3JjL3RlYW1zL3RlYW0tb3JkZXIvc2VydmljZXMvb3JkZXJTZXJ2aWNlLnRzXCIsXG4gICAgICAgICAgb3B0aW9uczogW2RlZmF1bHRPcHRpb25zXSxcbiAgICAgICAgfSxcblxuICAgICAgICAvLyDinIUg7Luk7Iqk7YWAIO2bhSDtjKjthLRcbiAgICAgICAge1xuICAgICAgICAgIGNvZGU6IGBcbiAgICAgICAgICAgIGltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuICAgICAgICAgICAgaW1wb3J0IHR5cGUgeyBVc2VRdWVyeVJlc3VsdCB9IGZyb20gJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc7XG4gICAgICAgICAgICBpbXBvcnQgeyB1c2VRdWVyeSwgdXNlTXV0YXRpb24sIHVzZVF1ZXJ5Q2xpZW50IH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcbiAgICAgICAgICAgIGltcG9ydCB7IHVzZVRvYXN0IH0gZnJvbSAnQC9jb3JlL2hvb2tzL3VzZVRvYXN0JztcbiAgICAgICAgICAgIGltcG9ydCB7IE9yZGVyU2VydmljZSB9IGZyb20gJ0AvdGVhbXMvdGVhbS1vcmRlci9zZXJ2aWNlcy9vcmRlclNlcnZpY2UnO1xuICAgICAgICAgICAgaW1wb3J0IHR5cGUgeyBPcmRlciwgQ3JlYXRlT3JkZXJEYXRhIH0gZnJvbSAnQC90ZWFtcy90ZWFtLW9yZGVyL3R5cGVzL29yZGVyJztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaW50ZXJmYWNlIFVzZU9yZGVyUmV0dXJuIHtcbiAgICAgICAgICAgICAgb3JkZXJzOiBPcmRlcltdO1xuICAgICAgICAgICAgICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gICAgICAgICAgICAgIGVycm9yOiBFcnJvciB8IG51bGw7XG4gICAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoZGF0YTogQ3JlYXRlT3JkZXJEYXRhKSA9PiBQcm9taXNlPHZvaWQ+O1xuICAgICAgICAgICAgICByZWZldGNoOiAoKSA9PiB2b2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBvcnQgY29uc3QgdXNlT3JkZXIgPSAoKTogVXNlT3JkZXJSZXR1cm4gPT4ge1xuICAgICAgICAgICAgICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KCk7XG4gICAgICAgICAgICAgIGNvbnN0IHsgc2hvd1RvYXN0IH0gPSB1c2VUb2FzdCgpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIGRhdGE6IG9yZGVycyA9IFtdLFxuICAgICAgICAgICAgICAgIGlzTG9hZGluZyxcbiAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICByZWZldGNoXG4gICAgICAgICAgICAgIH0gPSB1c2VRdWVyeSh7XG4gICAgICAgICAgICAgICAgcXVlcnlLZXk6IFsnb3JkZXJzJ10sXG4gICAgICAgICAgICAgICAgcXVlcnlGbjogT3JkZXJTZXJ2aWNlLmdldE9yZGVyc1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZU11dGF0aW9uID0gdXNlTXV0YXRpb24oe1xuICAgICAgICAgICAgICAgIG11dGF0aW9uRm46IE9yZGVyU2VydmljZS5jcmVhdGVPcmRlcixcbiAgICAgICAgICAgICAgICBvblN1Y2Nlc3M6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKHsgcXVlcnlLZXk6IFsnb3JkZXJzJ10gfSk7XG4gICAgICAgICAgICAgICAgICBzaG93VG9hc3QoJ+yjvOusuOydtCDshLHqs7XsoIHsnLzroZwg7IOd7ISx65CY7JeI7Iq164uI64ukLicpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25FcnJvcjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgc2hvd1RvYXN0KCfso7zrrLgg7IOd7ISx7JeQIOyLpO2MqO2WiOyKteuLiOuLpC4nLCAnZXJyb3InKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgY29uc3QgY3JlYXRlT3JkZXIgPSB1c2VDYWxsYmFjayhhc3luYyAoZGF0YTogQ3JlYXRlT3JkZXJEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgY3JlYXRlTXV0YXRpb24ubXV0YXRlQXN5bmMoZGF0YSk7XG4gICAgICAgICAgICAgIH0sIFtjcmVhdGVNdXRhdGlvbl0pO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvcmRlcnMsXG4gICAgICAgICAgICAgICAgaXNMb2FkaW5nLFxuICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgIGNyZWF0ZU9yZGVyLFxuICAgICAgICAgICAgICAgIHJlZmV0Y2hcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgYCxcbiAgICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvdGVhbXMvdGVhbS1vcmRlci9ob29rcy91c2VPcmRlci50c1wiLFxuICAgICAgICAgIG9wdGlvbnM6IFtkZWZhdWx0T3B0aW9uc10sXG4gICAgICAgIH0sXG4gICAgICBdLFxuXG4gICAgICBpbnZhbGlkOiBbXG4gICAgICAgIC8vIOKdjCDsi6TsoJwg7Iuc64KY66as7Jik7JeQ7IScIO2BrOuhnOyKpCDtjIAgaW1wb3J0IOqwkOyngFxuICAgICAgICB7XG4gICAgICAgICAgY29kZTogYFxuICAgICAgICAgICAgaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbiAgICAgICAgICAgIGltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ0AvY29yZS9jb21wb25lbnRzL0J1dHRvbic7XG4gICAgICAgICAgICBpbXBvcnQgeyBBcGlDbGllbnQgfSBmcm9tICdAL3NoYXJlZC9hcGkvY2xpZW50JztcbiAgICAgICAgICAgIGltcG9ydCB7IE9yZGVyU2VydmljZSB9IGZyb20gJ0AvdGVhbXMvdGVhbS1vcmRlci9zZXJ2aWNlcy9vcmRlclNlcnZpY2UnO1xuICAgICAgICAgICAgaW1wb3J0IHsgUHJvZmlsZVNlcnZpY2UgfSBmcm9tICdAL3RlYW1zL3RlYW0tcHJvZmlsZS9zZXJ2aWNlcy9wcm9maWxlU2VydmljZSc7IC8vIOKdjCDri6Trpbgg7YyAXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cG9ydCBjb25zdCBPcmRlckxpc3QgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIC8vIOy7tO2PrOuEjO2KuCDroZzsp4FcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgYCxcbiAgICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvdGVhbXMvdGVhbS1vcmRlci9jb21wb25lbnRzL09yZGVyTGlzdC50c3hcIixcbiAgICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgICAgIGVycm9yczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlSWQ6IFwiY3Jvc3NUZWFtSW1wb3J0XCIsXG4gICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGVhbTogXCJ0ZWFtLW9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdGFyZ2V0VGVhbTogXCJ0ZWFtLXByb2ZpbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcblxuICAgICAgICAvLyDinYwg7ISc67mE7Iqk7JeQ7IScIOuLpOuluCDtjIAg7YOA7J6FIGltcG9ydFxuICAgICAgICB7XG4gICAgICAgICAgY29kZTogYFxuICAgICAgICAgICAgaW1wb3J0IHsgQXBpQ2xpZW50IH0gZnJvbSAnQC9zaGFyZWQvYXBpL2NsaWVudCc7XG4gICAgICAgICAgICBpbXBvcnQgdHlwZSB7IE9yZGVyIH0gZnJvbSAnQC90ZWFtcy90ZWFtLW9yZGVyL3R5cGVzL29yZGVyJztcbiAgICAgICAgICAgIGltcG9ydCB0eXBlIHsgVXNlciB9IGZyb20gJ0AvdGVhbXMvdGVhbS1hdXRoL3R5cGVzL3VzZXInOyAvLyDinYwg64uk66W4IO2MgCDtg4DsnoVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwb3J0IGNsYXNzIE9yZGVyU2VydmljZSB7XG4gICAgICAgICAgICAgIHN0YXRpYyBhc3luYyBhc3NpZ25PcmRlcihvcmRlcklkOiBzdHJpbmcsIHVzZXI6IFVzZXIpOiBQcm9taXNlPE9yZGVyPiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFwaUNsaWVudC5wb3N0KCcvb3JkZXJzL2Fzc2lnbicsIHsgb3JkZXJJZCwgdXNlcklkOiB1c2VyLmlkIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgYCxcbiAgICAgICAgICBmaWxlbmFtZTogXCIvcHJvamVjdC9zcmMvdGVhbXMvdGVhbS1vcmRlci9zZXJ2aWNlcy9vcmRlclNlcnZpY2UudHNcIixcbiAgICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgICAgIGVycm9yczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlSWQ6IFwiY3Jvc3NUZWFtSW1wb3J0XCIsXG4gICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGVhbTogXCJ0ZWFtLW9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdGFyZ2V0VGVhbTogXCJ0ZWFtLWF1dGhcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIPCfp6og7ISx64qlIO2FjOyKpO2KuCAo64yA65+JIGltcG9ydClcbiAgZGVzY3JpYmUoXCLshLHriqUg7YWM7Iqk7Yq4XCIsICgpID0+IHtcbiAgICBjb25zdCBnZW5lcmF0ZUxhcmdlSW1wb3J0Q29kZSA9IChcbiAgICAgIHRlYW1OYW1lOiBzdHJpbmcsXG4gICAgICBjb3VudDogbnVtYmVyXG4gICAgKTogc3RyaW5nID0+IHtcbiAgICAgIGNvbnN0IGltcG9ydHMgPSBBcnJheS5mcm9tKFxuICAgICAgICB7IGxlbmd0aDogY291bnQgfSxcbiAgICAgICAgKF8sIGkpID0+XG4gICAgICAgICAgYGltcG9ydCB7IENvbXBvbmVudCR7aX0gfSBmcm9tICdAL3RlYW1zLyR7dGVhbU5hbWV9L2NvbXBvbmVudHMvQ29tcG9uZW50JHtpfSc7YFxuICAgICAgKS5qb2luKFwiXFxuXCIpO1xuICAgICAgcmV0dXJuIGltcG9ydHM7XG4gICAgfTtcblxuICAgIHJ1bGVUZXN0ZXIucnVuKFwicGVyZm9ybWFuY2UgdGVzdCB3aXRoIG1hbnkgaW1wb3J0c1wiLCBydWxlLCB7XG4gICAgICB2YWxpZDogW1xuICAgICAgICAvLyDinIUg6rCZ7J2AIO2MgOyXkOyEnCDrp47snYAgaW1wb3J0XG4gICAgICAgIHtcbiAgICAgICAgICBjb2RlOiBnZW5lcmF0ZUxhcmdlSW1wb3J0Q29kZShcInRlYW0tb3JkZXJcIiwgNTApLFxuICAgICAgICAgIGZpbGVuYW1lOiBcIi9wcm9qZWN0L3NyYy90ZWFtcy90ZWFtLW9yZGVyL3BhZ2VzL09yZGVyUGFnZS50c3hcIixcbiAgICAgICAgICBvcHRpb25zOiBbZGVmYXVsdE9wdGlvbnNdLFxuICAgICAgICB9LFxuICAgICAgXSxcblxuICAgICAgaW52YWxpZDogW1xuICAgICAgICAvLyDinYwg64uk66W4IO2MgOyXkOyEnCDrp47snYAgaW1wb3J0XG4gICAgICAgIHtcbiAgICAgICAgICBjb2RlOiBnZW5lcmF0ZUxhcmdlSW1wb3J0Q29kZShcInRlYW0tcHJvZmlsZVwiLCAxMCksXG4gICAgICAgICAgZmlsZW5hbWU6IFwiL3Byb2plY3Qvc3JjL3RlYW1zL3RlYW0tb3JkZXIvcGFnZXMvT3JkZXJQYWdlLnRzeFwiLFxuICAgICAgICAgIG9wdGlvbnM6IFtkZWZhdWx0T3B0aW9uc10sXG4gICAgICAgICAgZXJyb3JzOiBBcnJheS5mcm9tKHsgbGVuZ3RoOiAxMCB9LCAoKSA9PiAoe1xuICAgICAgICAgICAgbWVzc2FnZUlkOiBcImNyb3NzVGVhbUltcG9ydFwiLFxuICAgICAgICAgIH0pKSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbi8vIPCfk4og7YWM7Iqk7Yq4IOqysOqzvCDsmpTslb1cbmNvbnNvbGUubG9nKFwi8J+nqiBUeXBlU2NyaXB0IEVTTGludCDqt5zsuZkg7YWM7Iqk7Yq4IOyZhOujjCFcIik7XG5jb25zb2xlLmxvZyhcIvCfk4og7YWM7Iqk7Yq4IOy7pOuyhOumrOyngDpcIik7XG5jb25zb2xlLmxvZyhcIiAg4pyFIOq4sOuzuCBpbXBvcnQg7Yyo7YS0IO2FjOyKpO2KuFwiKTtcbmNvbnNvbGUubG9nKFwiICDinIUgVHlwZVNjcmlwdCDtg4DsnoUgaW1wb3J0IO2FjOyKpO2KuFwiKTtcbmNvbnNvbGUubG9nKFwiICDinIUg7Luk7Iqk7YWAIOyEpOyglSDthYzsiqTtirhcIik7XG5jb25zb2xlLmxvZyhcIiAg4pyFIOyXo+yngCDsvIDsnbTsiqQg7YWM7Iqk7Yq4XCIpO1xuY29uc29sZS5sb2coXCIgIOKchSDsi6TsoJwg7IKs7JqpIOyLnOuCmOumrOyYpCDthYzsiqTtirhcIik7XG5jb25zb2xlLmxvZyhcIiAg4pyFIOyEseuKpSDthYzsiqTtirhcIik7XG5jb25zb2xlLmxvZyhcIvCfjokg66qo65OgIO2FjOyKpO2KuCDsmYTro4whXCIpO1xuIl0sInZlcnNpb24iOjN9