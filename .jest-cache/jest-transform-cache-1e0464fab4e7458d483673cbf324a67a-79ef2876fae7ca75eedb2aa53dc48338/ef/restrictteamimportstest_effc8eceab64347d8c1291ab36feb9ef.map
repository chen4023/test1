{"file":"/Users/hyeonchaeeun/Desktop/ex-test/test1/eslint-rules/restrict-team-imports.test.ts","mappings":"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","names":[],"sources":["/Users/hyeonchaeeun/Desktop/ex-test/test1/eslint-rules/restrict-team-imports.test.ts"],"sourcesContent":["// 📁 eslint-rules/restrict-team-imports.test.ts\nimport { RuleTester } from \"eslint\";\nimport rule from \"./restric-team-imports\";\nimport type { TeamImportRuleOptions } from \"./types\";\n\nconst ruleTester = new RuleTester({\n  parser: require.resolve(\"@typescript-eslint/parser\"),\n  parserOptions: {\n    ecmaVersion: 2020,\n    sourceType: \"module\",\n    ecmaFeatures: {\n      jsx: true,\n    },\n  },\n});\n\ndescribe(\"restrict-team-imports (TypeScript 규칙)\", () => {\n  const defaultOptions: TeamImportRuleOptions = {\n    allowedGlobalFolders: [\"core\", \"shared\"],\n    teamFolderPrefix: \"team-\",\n    teamsBasePath: \"src/teams\",\n  };\n\n  ruleTester.run(\"restrict-team-imports\", rule, {\n    valid: [\n      // ✅ 외부 라이브러리 import\n      {\n        code: `import React from 'react';`,\n        filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n        options: [defaultOptions],\n      },\n      {\n        code: `import type { FC } from 'react';`,\n        filename: \"/project/src/teams/team-auth/components/LoginForm.tsx\",\n        options: [defaultOptions],\n      },\n      {\n        code: `import { z } from 'zod';`,\n        filename: \"/project/src/teams/team-order/types/order.ts\",\n        options: [defaultOptions],\n      },\n\n      // ✅ core 폴더 import\n      {\n        code: `import { Button } from '@/core/components/Button';`,\n        filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n        options: [defaultOptions],\n      },\n      {\n        code: `import type { ButtonProps } from '@/core/components/Button';`,\n        filename: \"/project/src/teams/team-auth/components/AuthButton.tsx\",\n        options: [defaultOptions],\n      },\n\n      // ✅ shared 폴더 import\n      {\n        code: `import { ApiClient } from '@/shared/api/client';`,\n        filename: \"/project/src/teams/team-order/services/orderService.ts\",\n        options: [defaultOptions],\n      },\n      {\n        code: `import type { User } from '@/shared/types/user';`,\n        filename: \"/project/src/teams/team-profile/types/profile.ts\",\n        options: [defaultOptions],\n      },\n\n      // ✅ 같은 팀 내부 import\n      {\n        code: `import { OrderType } from '@/teams/team-order/types/order';`,\n        filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n        options: [defaultOptions],\n      },\n      {\n        code: `import type { OrderFormData } from '@/teams/team-order/types/forms';`,\n        filename: \"/project/src/teams/team-order/components/OrderForm.tsx\",\n        options: [defaultOptions],\n      },\n\n      // ✅ 상대 경로 import\n      {\n        code: `import { useOrder } from '../hooks/useOrder';`,\n        filename: \"/project/src/teams/team-order/components/OrderForm.tsx\",\n        options: [defaultOptions],\n      },\n      {\n        code: `import type { OrderHookReturn } from './useOrder';`,\n        filename: \"/project/src/teams/team-order/hooks/useOrderForm.ts\",\n        options: [defaultOptions],\n      },\n\n      // ✅ Dynamic import - 허용되는 경우\n      {\n        code: `const Component = await import('@/core/components/Modal');`,\n        filename: \"/project/src/teams/team-order/pages/OrderPage.tsx\",\n        options: [defaultOptions],\n      },\n      {\n        code: `const { OrderUtils } = await import('@/teams/team-order/utils/orderUtils');`,\n        filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n        options: [defaultOptions],\n      },\n\n      // ✅ 팀 폴더 외부에서는 제한 없음\n      {\n        code: `import { ProfileComponent } from '@/teams/team-profile/components/Profile';`,\n        filename: \"/project/src/core/components/Layout.tsx\",\n        options: [defaultOptions],\n      },\n    ],\n\n    invalid: [\n      // ❌ 다른 팀으로의 import\n      {\n        code: `import { UserProfile } from '@/teams/team-profile/components/UserProfile';`,\n        filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n        options: [defaultOptions],\n        errors: [\n          {\n            messageId: \"crossTeamImport\",\n            data: {\n              currentTeam: \"team-order\",\n              targetTeam: \"team-profile\",\n            },\n          },\n        ],\n      },\n\n      // ❌ 타입 import도 제한됨\n      {\n        code: `import type { AuthUser } from '@/teams/team-auth/types/user';`,\n        filename: \"/project/src/teams/team-order/types/order.ts\",\n        options: [defaultOptions],\n        errors: [\n          {\n            messageId: \"crossTeamImport\",\n            data: {\n              currentTeam: \"team-order\",\n              targetTeam: \"team-auth\",\n            },\n          },\n        ],\n      },\n\n      // ❌ 여러 다른 팀 import\n      {\n        code: `\n          import { AuthService } from '@/teams/team-auth/services/auth';\n          import type { ProfileData } from '@/teams/team-profile/types/profile';\n          import { DashboardChart } from '@/teams/team-dashboard/components/Chart';\n        `,\n        filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n        options: [defaultOptions],\n        errors: [\n          {\n            messageId: \"crossTeamImport\",\n            data: {\n              currentTeam: \"team-order\",\n              targetTeam: \"team-auth\",\n            },\n          },\n          {\n            messageId: \"crossTeamImport\",\n            data: {\n              currentTeam: \"team-order\",\n              targetTeam: \"team-profile\",\n            },\n          },\n          {\n            messageId: \"crossTeamImport\",\n            data: {\n              currentTeam: \"team-order\",\n              targetTeam: \"team-dashboard\",\n            },\n          },\n        ],\n      },\n\n      // ❌ Dynamic import로 다른 팀 접근\n      {\n        code: `const ProfileComponent = await import('@/teams/team-profile/components/Profile');`,\n        filename: \"/project/src/teams/team-order/pages/OrderPage.tsx\",\n        options: [defaultOptions],\n        errors: [\n          {\n            messageId: \"crossTeamImport\",\n            data: {\n              currentTeam: \"team-order\",\n              targetTeam: \"team-profile\",\n            },\n          },\n        ],\n      },\n\n      // ❌ 허용되지 않은 폴더에서 import\n      {\n        code: `import { Utils } from '@/utils/helper';`,\n        filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n        options: [defaultOptions],\n        errors: [\n          {\n            messageId: \"restrictedImport\",\n            data: {\n              currentTeam: \"team-order\",\n              importPath: \"@/utils/helper\",\n            },\n          },\n        ],\n      },\n\n      // ❌ 허용되지 않은 lib 폴더\n      {\n        code: `import type { LibConfig } from '@/lib/config';`,\n        filename: \"/project/src/teams/team-auth/pages/LoginPage.tsx\",\n        options: [defaultOptions],\n        errors: [\n          {\n            messageId: \"restrictedImport\",\n            data: {\n              currentTeam: \"team-auth\",\n              importPath: \"@/lib/config\",\n            },\n          },\n        ],\n      },\n\n      // ❌ 커스텀 설정에서도 크로스 팀 import 금지\n      {\n        code: `import { AuthComponent } from '@/teams/team-auth/components/Auth';`,\n        filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n        options: [\n          {\n            ...defaultOptions,\n            allowedGlobalFolders: [\"core\", \"shared\", \"utils\"],\n          },\n        ],\n        errors: [\n          {\n            messageId: \"crossTeamImport\",\n            data: {\n              currentTeam: \"team-order\",\n              targetTeam: \"team-auth\",\n            },\n          },\n        ],\n      },\n    ],\n  });\n\n  // 🧪 커스텀 설정 테스트\n  describe(\"커스텀 설정 테스트\", () => {\n    const customOptions: TeamImportRuleOptions = {\n      allowedGlobalFolders: [\"shared\", \"entities\", \"widgets\"],\n      teamFolderPrefix: \"feature-\",\n      teamsBasePath: \"src/features\",\n    };\n\n    ruleTester.run(\"restrict-team-imports with custom config\", rule, {\n      valid: [\n        // ✅ 커스텀 allowedGlobalFolders 테스트\n        {\n          code: `import { EntityModel } from '@/entities/user';`,\n          filename:\n            \"/project/src/features/feature-order/components/OrderList.tsx\",\n          options: [customOptions],\n        },\n        {\n          code: `import { WidgetComponent } from '@/widgets/header';`,\n          filename: \"/project/src/features/feature-auth/pages/LoginPage.tsx\",\n          options: [customOptions],\n        },\n\n        // ✅ 커스텀 teamFolderPrefix 테스트\n        {\n          code: `import { FeatureComponent } from '@/teams/feature-auth/components/Auth';`,\n          filename: \"/project/src/features/feature-auth/pages/LoginPage.tsx\",\n          options: [customOptions],\n        },\n      ],\n\n      invalid: [\n        // ❌ 커스텀 설정에서도 크로스 팀 import 금지\n        {\n          code: `import { AuthComponent } from '@/teams/feature-auth/components/Auth';`,\n          filename:\n            \"/project/src/features/feature-order/components/OrderList.tsx\",\n          options: [customOptions],\n          errors: [\n            {\n              messageId: \"crossTeamImport\",\n              data: {\n                currentTeam: \"feature-order\",\n                targetTeam: \"feature-auth\",\n              },\n            },\n          ],\n        },\n      ],\n    });\n  });\n\n  // 🧪 엣지 케이스 테스트\n  describe(\"엣지 케이스 테스트\", () => {\n    ruleTester.run(\"restrict-team-imports edge cases\", rule, {\n      valid: [\n        // ✅ 깊은 중첩 폴더 구조\n        {\n          code: `import { DeepComponent } from '@/teams/team-order/components/forms/inputs/TextInput';`,\n          filename:\n            \"/project/src/teams/team-order/pages/order/detail/OrderDetail.tsx\",\n          options: [defaultOptions],\n        },\n\n        // ✅ 대소문자 혼합 (실제 팀명 감지)\n        {\n          code: `import { Component } from '@/teams/Team-Order/components/Button';`,\n          filename: \"/project/src/teams/Team-Order/pages/OrderPage.tsx\",\n          options: [defaultOptions],\n        },\n\n        // ✅ 복잡한 import 구조\n        {\n          code: `import { \n            OrderService, \n            type OrderConfig,\n            ORDER_CONSTANTS \n          } from '@/teams/team-order/services/orderService';`,\n          filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n          options: [defaultOptions],\n        },\n\n        // ✅ 네임스페이스 import\n        {\n          code: `import * as OrderUtils from '@/teams/team-order/utils/orderUtils';`,\n          filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n          options: [defaultOptions],\n        },\n\n        // ✅ 조건부 import (동적)\n        {\n          code: `\n            if (condition) {\n              const { OrderModal } = await import('@/teams/team-order/components/OrderModal');\n            }\n          `,\n          filename: \"/project/src/teams/team-order/pages/OrderPage.tsx\",\n          options: [defaultOptions],\n        },\n\n        // ✅ Re-export (같은 팀 내)\n        {\n          code: `export { OrderButton } from '@/teams/team-order/components/OrderButton';`,\n          filename: \"/project/src/teams/team-order/index.ts\",\n          options: [defaultOptions],\n        },\n\n        // ✅ 타입 전용 import\n        {\n          code: `import type { OrderStatus, OrderPriority } from '@/teams/team-order/types/order';`,\n          filename: \"/project/src/teams/team-order/hooks/useOrder.ts\",\n          options: [defaultOptions],\n        },\n      ],\n\n      invalid: [\n        // ❌ 깊은 중첩에서도 크로스 팀 감지\n        {\n          code: `import { ProfileForm } from '@/teams/team-profile/components/forms/ProfileForm';`,\n          filename:\n            \"/project/src/teams/team-order/pages/order/detail/OrderDetail.tsx\",\n          options: [defaultOptions],\n          errors: [\n            {\n              messageId: \"crossTeamImport\",\n              data: {\n                currentTeam: \"team-order\",\n                targetTeam: \"team-profile\",\n              },\n            },\n          ],\n        },\n\n        // ❌ 복잡한 import에서도 감지\n        {\n          code: `import { \n            AuthService,\n            type AuthConfig \n          } from '@/teams/team-auth/services/authService';`,\n          filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n          options: [defaultOptions],\n          errors: [\n            {\n              messageId: \"crossTeamImport\",\n              data: {\n                currentTeam: \"team-order\",\n                targetTeam: \"team-auth\",\n              },\n            },\n          ],\n        },\n\n        // ❌ 네임스페이스 import도 제한\n        {\n          code: `import * as ProfileUtils from '@/teams/team-profile/utils/profileUtils';`,\n          filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n          options: [defaultOptions],\n          errors: [\n            {\n              messageId: \"crossTeamImport\",\n              data: {\n                currentTeam: \"team-order\",\n                targetTeam: \"team-profile\",\n              },\n            },\n          ],\n        },\n\n        // ❌ Re-export도 제한\n        {\n          code: `export { ProfileCard } from '@/teams/team-profile/components/ProfileCard';`,\n          filename: \"/project/src/teams/team-order/index.ts\",\n          options: [defaultOptions],\n          errors: [\n            {\n              messageId: \"crossTeamImport\",\n              data: {\n                currentTeam: \"team-order\",\n                targetTeam: \"team-profile\",\n              },\n            },\n          ],\n        },\n\n        // ❌ 조건부 동적 import도 제한\n        {\n          code: `\n            if (showProfile) {\n              const { ProfileModal } = await import('@/teams/team-profile/components/ProfileModal');\n            }\n          `,\n          filename: \"/project/src/teams/team-order/pages/OrderPage.tsx\",\n          options: [defaultOptions],\n          errors: [\n            {\n              messageId: \"crossTeamImport\",\n              data: {\n                currentTeam: \"team-order\",\n                targetTeam: \"team-profile\",\n              },\n            },\n          ],\n        },\n      ],\n    });\n  });\n\n  // 🧪 실제 시나리오 테스트\n  describe(\"실제 사용 시나리오\", () => {\n    ruleTester.run(\"realistic scenarios\", rule, {\n      valid: [\n        // ✅ 실제 Next.js 컴포넌트 패턴\n        {\n          code: `\n            'use client';\n            \n            import React, { useState, useCallback } from 'react';\n            import type { FC, MouseEvent } from 'react';\n            import { Button } from '@/core/components/ui/Button';\n            import { Card } from '@/core/components/ui/Card';\n            import { useToast } from '@/core/hooks/useToast';\n            import { ApiClient } from '@/shared/api/client';\n            import type { ApiResponse } from '@/shared/types/api';\n            import { OrderService } from '@/teams/team-order/services/orderService';\n            import type { Order, OrderStatus } from '@/teams/team-order/types/order';\n            import { useOrder } from '../hooks/useOrder';\n            \n            interface OrderListProps {\n              initialOrders: Order[];\n              onOrderUpdate?: (order: Order) => void;\n            }\n            \n            export const OrderList: FC<OrderListProps> = ({ initialOrders, onOrderUpdate }) => {\n              const [orders, setOrders] = useState<Order[]>(initialOrders);\n              const { updateOrderStatus } = useOrder();\n              const { showToast } = useToast();\n              \n              const handleStatusChange = useCallback(async (orderId: string, status: OrderStatus) => {\n                try {\n                  const updatedOrder = await OrderService.updateStatus(orderId, status);\n                  setOrders(prev => prev.map(order => \n                    order.id === orderId ? updatedOrder : order\n                  ));\n                  onOrderUpdate?.(updatedOrder);\n                  showToast('주문 상태가 업데이트되었습니다.');\n                } catch (error) {\n                  showToast('업데이트에 실패했습니다.', 'error');\n                }\n              }, [onOrderUpdate, showToast]);\n              \n              return (\n                <div className=\"space-y-4\">\n                  {orders.map(order => (\n                    <Card key={order.id}>\n                      {/* 주문 카드 내용 */}\n                    </Card>\n                  ))}\n                </div>\n              );\n            };\n          `,\n          filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n          options: [defaultOptions],\n        },\n\n        // ✅ 서비스 레이어 패턴\n        {\n          code: `\n            import { ApiClient } from '@/shared/api/client';\n            import type { ApiResponse, PaginationParams } from '@/shared/types/api';\n            import { handleApiError } from '@/shared/utils/errorHandler';\n            import type { Order, CreateOrderData, UpdateOrderData } from '@/teams/team-order/types/order';\n            \n            export class OrderService {\n              private static readonly BASE_PATH = '/api/orders';\n              \n              static async getOrders(params?: PaginationParams): Promise<ApiResponse<Order[]>> {\n                try {\n                  return await ApiClient.get(this.BASE_PATH, { params });\n                } catch (error) {\n                  throw handleApiError(error);\n                }\n              }\n              \n              static async createOrder(data: CreateOrderData): Promise<ApiResponse<Order>> {\n                try {\n                  return await ApiClient.post(this.BASE_PATH, data);\n                } catch (error) {\n                  throw handleApiError(error);\n                }\n              }\n            }\n          `,\n          filename: \"/project/src/teams/team-order/services/orderService.ts\",\n          options: [defaultOptions],\n        },\n\n        // ✅ 커스텀 훅 패턴\n        {\n          code: `\n            import { useState, useEffect, useCallback } from 'react';\n            import type { UseQueryResult } from '@tanstack/react-query';\n            import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n            import { useToast } from '@/core/hooks/useToast';\n            import { OrderService } from '@/teams/team-order/services/orderService';\n            import type { Order, CreateOrderData } from '@/teams/team-order/types/order';\n            \n            interface UseOrderReturn {\n              orders: Order[];\n              isLoading: boolean;\n              error: Error | null;\n              createOrder: (data: CreateOrderData) => Promise<void>;\n              refetch: () => void;\n            }\n            \n            export const useOrder = (): UseOrderReturn => {\n              const queryClient = useQueryClient();\n              const { showToast } = useToast();\n              \n              const {\n                data: orders = [],\n                isLoading,\n                error,\n                refetch\n              } = useQuery({\n                queryKey: ['orders'],\n                queryFn: OrderService.getOrders\n              });\n              \n              const createMutation = useMutation({\n                mutationFn: OrderService.createOrder,\n                onSuccess: () => {\n                  queryClient.invalidateQueries({ queryKey: ['orders'] });\n                  showToast('주문이 성공적으로 생성되었습니다.');\n                },\n                onError: () => {\n                  showToast('주문 생성에 실패했습니다.', 'error');\n                }\n              });\n              \n              const createOrder = useCallback(async (data: CreateOrderData) => {\n                await createMutation.mutateAsync(data);\n              }, [createMutation]);\n              \n              return {\n                orders,\n                isLoading,\n                error,\n                createOrder,\n                refetch\n              };\n            };\n          `,\n          filename: \"/project/src/teams/team-order/hooks/useOrder.ts\",\n          options: [defaultOptions],\n        },\n      ],\n\n      invalid: [\n        // ❌ 실제 시나리오에서 크로스 팀 import 감지\n        {\n          code: `\n            import React from 'react';\n            import { Button } from '@/core/components/Button';\n            import { ApiClient } from '@/shared/api/client';\n            import { OrderService } from '@/teams/team-order/services/orderService';\n            import { ProfileService } from '@/teams/team-profile/services/profileService'; // ❌ 다른 팀\n            \n            export const OrderList = () => {\n              // 컴포넌트 로직\n            };\n          `,\n          filename: \"/project/src/teams/team-order/components/OrderList.tsx\",\n          options: [defaultOptions],\n          errors: [\n            {\n              messageId: \"crossTeamImport\",\n              data: {\n                currentTeam: \"team-order\",\n                targetTeam: \"team-profile\",\n              },\n            },\n          ],\n        },\n\n        // ❌ 서비스에서 다른 팀 타입 import\n        {\n          code: `\n            import { ApiClient } from '@/shared/api/client';\n            import type { Order } from '@/teams/team-order/types/order';\n            import type { User } from '@/teams/team-auth/types/user'; // ❌ 다른 팀 타입\n            \n            export class OrderService {\n              static async assignOrder(orderId: string, user: User): Promise<Order> {\n                return ApiClient.post('/orders/assign', { orderId, userId: user.id });\n              }\n            }\n          `,\n          filename: \"/project/src/teams/team-order/services/orderService.ts\",\n          options: [defaultOptions],\n          errors: [\n            {\n              messageId: \"crossTeamImport\",\n              data: {\n                currentTeam: \"team-order\",\n                targetTeam: \"team-auth\",\n              },\n            },\n          ],\n        },\n      ],\n    });\n  });\n\n  // 🧪 성능 테스트 (대량 import)\n  describe(\"성능 테스트\", () => {\n    const generateLargeImportCode = (\n      teamName: string,\n      count: number\n    ): string => {\n      const imports = Array.from(\n        { length: count },\n        (_, i) =>\n          `import { Component${i} } from '@/teams/${teamName}/components/Component${i}';`\n      ).join(\"\\n\");\n      return imports;\n    };\n\n    ruleTester.run(\"performance test with many imports\", rule, {\n      valid: [\n        // ✅ 같은 팀에서 많은 import\n        {\n          code: generateLargeImportCode(\"team-order\", 50),\n          filename: \"/project/src/teams/team-order/pages/OrderPage.tsx\",\n          options: [defaultOptions],\n        },\n      ],\n\n      invalid: [\n        // ❌ 다른 팀에서 많은 import\n        {\n          code: generateLargeImportCode(\"team-profile\", 10),\n          filename: \"/project/src/teams/team-order/pages/OrderPage.tsx\",\n          options: [defaultOptions],\n          errors: Array.from({ length: 10 }, () => ({\n            messageId: \"crossTeamImport\",\n          })),\n        },\n      ],\n    });\n  });\n});\n\n// 📊 테스트 결과 요약\nconsole.log(\"🧪 TypeScript ESLint 규칙 테스트 완료!\");\nconsole.log(\"📊 테스트 커버리지:\");\nconsole.log(\"  ✅ 기본 import 패턴 테스트\");\nconsole.log(\"  ✅ TypeScript 타입 import 테스트\");\nconsole.log(\"  ✅ 커스텀 설정 테스트\");\nconsole.log(\"  ✅ 엣지 케이스 테스트\");\nconsole.log(\"  ✅ 실제 사용 시나리오 테스트\");\nconsole.log(\"  ✅ 성능 테스트\");\nconsole.log(\"🎉 모든 테스트 완료!\");\n"],"version":3}